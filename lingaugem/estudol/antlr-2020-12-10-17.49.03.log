2020-12-10 17:49:02:594 grammar LogManager.java:25 before: (COMBINED_GRAMMAR estudol (RULES (RULE inicio (BLOCK (ALT 'programa' ID corpo))) (RULE corpo (BLOCK (ALT AbreChave secaoVariaveis listaComandos FechaChave))) (RULE secaoVariaveis (BLOCK (ALT 'vars' ':' listDecVariavel PVirg))) (RULE listDecVariavel (BLOCK (ALT listDecVariavel VIRG varDec) (ALT varDec))) (RULE varDec (BLOCK (ALT tipos ID))) (RULE tipos (BLOCK (ALT TipotInt) (ALT TipoReal) (ALT TipoChar))) (RULE bloco (BLOCK (ALT AbreChave listaComandos FechaChave))) (RULE listaComandos (BLOCK (ALT listaComandos command) (ALT command))) (RULE command (BLOCK (ALT singleCmd PVirg) (ALT stmt))) (RULE singleCmd (BLOCK (ALT ID OPAtrib cexpr))) (RULE stmt (BLOCK (ALT SE AbreParentese cexpr FechaParentese bloco) (ALT SE AbreParentese cexpr FechaParentese bloco SENAO bloco) (ALT ENQUANTO AbreParentese cexpr FechaParentese bloco) (ALT FACA bloco ENQUANTO cexpr))) (RULE cexpr (BLOCK (ALT expr cexpr1) (ALT expr OPIgual expr cexpr1) (ALT expr OPMaior expr cexpr1) (ALT expr OPMenor expr cexpr1))) (RULE cexpr1 (BLOCK (ALT OPAnd cexpr cexpr1) (ALT OPOr cexpr cexpr1) (ALT EPSILON))) (RULE expr (BLOCK (ALT AbreParentese cexpr FechaParentese expr1) (ALT ID expr1) (ALT INT expr1) (ALT CHAR expr1) (ALT FLOAT expr1))) (RULE expr1 (BLOCK (ALT OPMais expr expr1) (ALT OPMenos expr expr1) (ALT OPDiv expr expr1) (ALT OPMult expr expr1) (ALT EPSILON))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DIGIT (BLOCK (ALT [0-9]))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) (* (BLOCK (ALT DIGIT)))))) (RULE DOT (BLOCK (ALT '.'))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE CHAR (BLOCK (ALT '\'' (BLOCK (ALT [0-9A-Za-z]) (ALT '\\' (BLOCK (ALT [a-f]) (ALT [0-9]) (ALT [1-9] [0-9]) (ALT '1' [0-2] [0-7])))) '\''))) (RULE AbreChave (BLOCK (ALT '{'))) (RULE FechaChave (BLOCK (ALT '}'))) (RULE AbreParentese (BLOCK (ALT '('))) (RULE FechaParentese (BLOCK (ALT ')'))) (RULE TipotInt (BLOCK (ALT 'INT'))) (RULE TipoReal (BLOCK (ALT 'REAL'))) (RULE TipoChar (BLOCK (ALT 'CHAR'))) (RULE PVirg (BLOCK (ALT ';'))) (RULE OPAtrib (BLOCK (ALT ':='))) (RULE SE (BLOCK (ALT 'SE'))) (RULE SENAO (BLOCK (ALT 'SENAO'))) (RULE ENQUANTO (BLOCK (ALT 'ENQUANTO'))) (RULE FACA (BLOCK (ALT 'FACA'))) (RULE VIRG (BLOCK (ALT ','))) (RULE OPAnd (BLOCK (ALT 'AND'))) (RULE OPOr (BLOCK (ALT 'OR'))) (RULE OPMaior (BLOCK (ALT '>'))) (RULE OPMenor (BLOCK (ALT '<'))) (RULE OPIgual (BLOCK (ALT '=='))) (RULE OPMais (BLOCK (ALT '+'))) (RULE OPDiv (BLOCK (ALT '/'))) (RULE OPMenos (BLOCK (ALT '-'))) (RULE OPMult (BLOCK (ALT '*'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2020-12-10 17:49:02:617 grammar LogManager.java:25 after: (COMBINED_GRAMMAR estudol (RULES (RULE inicio (BLOCK (ALT 'programa' ID corpo))) (RULE corpo (BLOCK (ALT AbreChave secaoVariaveis listaComandos FechaChave))) (RULE secaoVariaveis (BLOCK (ALT 'vars' ':' listDecVariavel PVirg))) (RULE listDecVariavel (BLOCK (ALT listDecVariavel VIRG varDec) (ALT varDec))) (RULE varDec (BLOCK (ALT tipos ID))) (RULE tipos (BLOCK (ALT (SET TipotInt TipoReal TipoChar)))) (RULE bloco (BLOCK (ALT AbreChave listaComandos FechaChave))) (RULE listaComandos (BLOCK (ALT listaComandos command) (ALT command))) (RULE command (BLOCK (ALT singleCmd PVirg) (ALT stmt))) (RULE singleCmd (BLOCK (ALT ID OPAtrib cexpr))) (RULE stmt (BLOCK (ALT SE AbreParentese cexpr FechaParentese bloco) (ALT SE AbreParentese cexpr FechaParentese bloco SENAO bloco) (ALT ENQUANTO AbreParentese cexpr FechaParentese bloco) (ALT FACA bloco ENQUANTO cexpr))) (RULE cexpr (BLOCK (ALT expr cexpr1) (ALT expr OPIgual expr cexpr1) (ALT expr OPMaior expr cexpr1) (ALT expr OPMenor expr cexpr1))) (RULE cexpr1 (BLOCK (ALT OPAnd cexpr cexpr1) (ALT OPOr cexpr cexpr1) (ALT EPSILON))) (RULE expr (BLOCK (ALT AbreParentese cexpr FechaParentese expr1) (ALT ID expr1) (ALT INT expr1) (ALT CHAR expr1) (ALT FLOAT expr1))) (RULE expr1 (BLOCK (ALT OPMais expr expr1) (ALT OPMenos expr expr1) (ALT OPDiv expr expr1) (ALT OPMult expr expr1) (ALT EPSILON))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DIGIT (BLOCK (ALT [0-9]))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) (* (BLOCK (ALT DIGIT)))))) (RULE DOT (BLOCK (ALT '.'))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE CHAR (BLOCK (ALT '\'' (BLOCK (ALT [0-9A-Za-z]) (ALT '\\' (BLOCK (ALT [a-f]) (ALT [0-9]) (ALT [1-9] [0-9]) (ALT '1' [0-2] [0-7])))) '\''))) (RULE AbreChave (BLOCK (ALT '{'))) (RULE FechaChave (BLOCK (ALT '}'))) (RULE AbreParentese (BLOCK (ALT '('))) (RULE FechaParentese (BLOCK (ALT ')'))) (RULE TipotInt (BLOCK (ALT 'INT'))) (RULE TipoReal (BLOCK (ALT 'REAL'))) (RULE TipoChar (BLOCK (ALT 'CHAR'))) (RULE PVirg (BLOCK (ALT ';'))) (RULE OPAtrib (BLOCK (ALT ':='))) (RULE SE (BLOCK (ALT 'SE'))) (RULE SENAO (BLOCK (ALT 'SENAO'))) (RULE ENQUANTO (BLOCK (ALT 'ENQUANTO'))) (RULE FACA (BLOCK (ALT 'FACA'))) (RULE VIRG (BLOCK (ALT ','))) (RULE OPAnd (BLOCK (ALT 'AND'))) (RULE OPOr (BLOCK (ALT 'OR'))) (RULE OPMaior (BLOCK (ALT '>'))) (RULE OPMenor (BLOCK (ALT '<'))) (RULE OPIgual (BLOCK (ALT '=='))) (RULE OPMais (BLOCK (ALT '+'))) (RULE OPDiv (BLOCK (ALT '/'))) (RULE OPMenos (BLOCK (ALT '-'))) (RULE OPMult (BLOCK (ALT '*'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2020-12-10 17:49:02:643 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR estudol (RULES (RULE inicio (BLOCK (ALT 'programa' ID corpo))) (RULE corpo (BLOCK (ALT AbreChave secaoVariaveis listaComandos FechaChave))) (RULE secaoVariaveis (BLOCK (ALT 'vars' ':' listDecVariavel PVirg))) (RULE listDecVariavel (BLOCK (ALT listDecVariavel VIRG varDec) (ALT varDec))) (RULE varDec (BLOCK (ALT tipos ID))) (RULE tipos (BLOCK (ALT (SET TipotInt TipoReal TipoChar)))) (RULE bloco (BLOCK (ALT AbreChave listaComandos FechaChave))) (RULE listaComandos (BLOCK (ALT listaComandos command) (ALT command))) (RULE command (BLOCK (ALT singleCmd PVirg) (ALT stmt))) (RULE singleCmd (BLOCK (ALT ID OPAtrib cexpr))) (RULE stmt (BLOCK (ALT SE AbreParentese cexpr FechaParentese bloco) (ALT SE AbreParentese cexpr FechaParentese bloco SENAO bloco) (ALT ENQUANTO AbreParentese cexpr FechaParentese bloco) (ALT FACA bloco ENQUANTO cexpr))) (RULE cexpr (BLOCK (ALT expr cexpr1) (ALT expr OPIgual expr cexpr1) (ALT expr OPMaior expr cexpr1) (ALT expr OPMenor expr cexpr1))) (RULE cexpr1 (BLOCK (ALT OPAnd cexpr cexpr1) (ALT OPOr cexpr cexpr1) (ALT EPSILON))) (RULE expr (BLOCK (ALT AbreParentese cexpr FechaParentese expr1) (ALT ID expr1) (ALT INT expr1) (ALT CHAR expr1) (ALT FLOAT expr1))) (RULE expr1 (BLOCK (ALT OPMais expr expr1) (ALT OPMenos expr expr1) (ALT OPDiv expr expr1) (ALT OPMult expr expr1) (ALT EPSILON)))))
2020-12-10 17:49:02:643 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR estudolLexer (RULES (RULE T__0 (BLOCK (ALT 'programa'))) (RULE T__1 (BLOCK (ALT 'vars'))) (RULE T__2 (BLOCK (ALT ':'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DIGIT (BLOCK (ALT [0-9]))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) (* (BLOCK (ALT DIGIT)))))) (RULE DOT (BLOCK (ALT '.'))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE CHAR (BLOCK (ALT '\'' (BLOCK (ALT [0-9A-Za-z]) (ALT '\\' (BLOCK (ALT [a-f]) (ALT [0-9]) (ALT [1-9] [0-9]) (ALT '1' [0-2] [0-7])))) '\''))) (RULE AbreChave (BLOCK (ALT '{'))) (RULE FechaChave (BLOCK (ALT '}'))) (RULE AbreParentese (BLOCK (ALT '('))) (RULE FechaParentese (BLOCK (ALT ')'))) (RULE TipotInt (BLOCK (ALT 'INT'))) (RULE TipoReal (BLOCK (ALT 'REAL'))) (RULE TipoChar (BLOCK (ALT 'CHAR'))) (RULE PVirg (BLOCK (ALT ';'))) (RULE OPAtrib (BLOCK (ALT ':='))) (RULE SE (BLOCK (ALT 'SE'))) (RULE SENAO (BLOCK (ALT 'SENAO'))) (RULE ENQUANTO (BLOCK (ALT 'ENQUANTO'))) (RULE FACA (BLOCK (ALT 'FACA'))) (RULE VIRG (BLOCK (ALT ','))) (RULE OPAnd (BLOCK (ALT 'AND'))) (RULE OPOr (BLOCK (ALT 'OR'))) (RULE OPMaior (BLOCK (ALT '>'))) (RULE OPMenor (BLOCK (ALT '<'))) (RULE OPIgual (BLOCK (ALT '=='))) (RULE OPMais (BLOCK (ALT '+'))) (RULE OPDiv (BLOCK (ALT '/'))) (RULE OPMenos (BLOCK (ALT '-'))) (RULE OPMult (BLOCK (ALT '*'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2020-12-10 17:49:03:007 left-recursion LogManager.java:25 listDecVariavel
    :   ( {} varDec<tokenIndex=55> 
        )
        (
          {precpred(_ctx, 2)}?<p=2> VIRG<tokenIndex=49> varDec<tokenIndex=51>
        )*
    ;
2020-12-10 17:49:03:012 grammar LogManager.java:25 added: (RULE listDecVariavel (BLOCK (ALT (BLOCK (ALT {} (varDec (ELEMENT_OPTIONS (= tokenIndex 55))))) (* (BLOCK (ALT ({precpred(_ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (VIRG (ELEMENT_OPTIONS (= tokenIndex 49))) (varDec (ELEMENT_OPTIONS (= tokenIndex 51)))))))))
2020-12-10 17:49:03:016 left-recursion LogManager.java:25 listaComandos
    :   ( {} command<tokenIndex=102> 
        )
        (
          {precpred(_ctx, 2)}?<p=2> command<tokenIndex=98>
        )*
    ;
2020-12-10 17:49:03:018 grammar LogManager.java:25 added: (RULE listaComandos (BLOCK (ALT (BLOCK (ALT {} (command (ELEMENT_OPTIONS (= tokenIndex 102))))) (* (BLOCK (ALT ({precpred(_ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (command (ELEMENT_OPTIONS (= tokenIndex 98)))))))))
2020-12-10 17:49:03:024 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, INT=4, DIGIT=5, FLOAT=6, DOT=7, ID=8, CHAR=9, AbreChave=10, FechaChave=11, AbreParentese=12, FechaParentese=13, TipotInt=14, TipoReal=15, TipoChar=16, PVirg=17, OPAtrib=18, SE=19, SENAO=20, ENQUANTO=21, FACA=22, VIRG=23, OPAnd=24, OPOr=25, OPMaior=26, OPMenor=27, OPIgual=28, OPMais=29, OPDiv=30, OPMenos=31, OPMult=32, WS=33}
2020-12-10 17:49:03:024 semantics LogManager.java:25 strings={'programa'=1, 'vars'=2, ':'=3, '.'=7, '{'=10, '}'=11, '('=12, ')'=13, 'INT'=14, 'REAL'=15, 'CHAR'=16, ';'=17, ':='=18, 'SE'=19, 'SENAO'=20, 'ENQUANTO'=21, 'FACA'=22, ','=23, 'AND'=24, 'OR'=25, '>'=26, '<'=27, '=='=28, '+'=29, '/'=30, '-'=31, '*'=32}
2020-12-10 17:49:03:035 LL1 LogManager.java:25 
DECISION 0 in rule listDecVariavel
2020-12-10 17:49:03:035 LL1 LogManager.java:25 look=[null, 17]
2020-12-10 17:49:03:035 LL1 LogManager.java:25 LL(1)? false
2020-12-10 17:49:03:035 LL1 LogManager.java:25 
DECISION 1 in rule listaComandos
2020-12-10 17:49:03:035 LL1 LogManager.java:25 look=[null, 11]
2020-12-10 17:49:03:035 LL1 LogManager.java:25 LL(1)? false
2020-12-10 17:49:03:035 LL1 LogManager.java:25 
DECISION 2 in rule command
2020-12-10 17:49:03:035 LL1 LogManager.java:25 look=[8, {19, 21..22}]
2020-12-10 17:49:03:035 LL1 LogManager.java:25 LL(1)? true
2020-12-10 17:49:03:035 LL1 LogManager.java:25 
DECISION 3 in rule stmt
2020-12-10 17:49:03:035 LL1 LogManager.java:25 look=[19, 19, 21, 22]
2020-12-10 17:49:03:035 LL1 LogManager.java:25 LL(1)? false
2020-12-10 17:49:03:035 LL1 LogManager.java:25 
DECISION 4 in rule cexpr
2020-12-10 17:49:03:036 LL1 LogManager.java:25 look=[{4, 6, 8..9, 12}, {4, 6, 8..9, 12}, {4, 6, 8..9, 12}, {4, 6, 8..9, 12}]
2020-12-10 17:49:03:036 LL1 LogManager.java:25 LL(1)? false
2020-12-10 17:49:03:036 LL1 LogManager.java:25 
DECISION 5 in rule cexpr1
2020-12-10 17:49:03:036 LL1 LogManager.java:25 look=[24, 25, null]
2020-12-10 17:49:03:036 LL1 LogManager.java:25 LL(1)? false
2020-12-10 17:49:03:036 LL1 LogManager.java:25 
DECISION 6 in rule expr
2020-12-10 17:49:03:036 LL1 LogManager.java:25 look=[12, 8, 4, 9, 6]
2020-12-10 17:49:03:036 LL1 LogManager.java:25 LL(1)? true
2020-12-10 17:49:03:036 LL1 LogManager.java:25 
DECISION 7 in rule expr1
2020-12-10 17:49:03:037 LL1 LogManager.java:25 look=[29, 31, 30, 32, null]
2020-12-10 17:49:03:038 LL1 LogManager.java:25 LL(1)? false
2020-12-10 17:49:03:062 action-translator LogManager.java:25 translate 
2020-12-10 17:49:03:063 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2020-12-10 17:49:03:064 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2020-12-10 17:49:03:066 action-translator LogManager.java:25 translate 
2020-12-10 17:49:03:067 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2020-12-10 17:49:03:067 action-translator LogManager.java:25 translate precpred(_ctx, 2)
