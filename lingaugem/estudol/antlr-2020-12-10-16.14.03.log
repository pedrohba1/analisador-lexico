2020-12-10 16:14:03:267 grammar LogManager.java:25 before: (COMBINED_GRAMMAR estudol (RULES (RULE inicio (BLOCK (ALT 'programa' ID corpo))) (RULE corpo (BLOCK (ALT AbreChave secaoVariaveis listaComandos FechaChave))) (RULE secaoVariaveis (BLOCK (ALT 'vars' ':' listDecVariavel PVirg))) (RULE listDecVariavel (BLOCK (ALT listDecVariavel VIRG varDec) (ALT varDec))) (RULE varDec (BLOCK (ALT tipos ID))) (RULE tipos (BLOCK (ALT TipotInt) (ALT TipoReal) (ALT TipoChar))) (RULE bloco (BLOCK (ALT AbreChave listaComandos FechaChave))) (RULE listaComandos (BLOCK (ALT listaComandos command) (ALT command))) (RULE command (BLOCK (ALT singleCmd PVirg) (ALT stmt))) (RULE singleCmd (BLOCK (ALT ID OPAtrib cexpr))) (RULE stmt (BLOCK (ALT SE AbreParentese cexpr FechaParentese bloco) (ALT SE AbreParentese cexpr FechaParentese bloco SENAO bloco) (ALT ENQUANTO AbreParentese cexpr FechaParentese bloco) (ALT FACA bloco ENQUANTO cexpr))) (RULE cexpr (BLOCK (ALT cexpr OPAnd cexpr) (ALT cexpr OPOr cexpr) (ALT expr OPIgual expr) (ALT expr OPMaior expr) (ALT expr OPMenor expr) (ALT expr))) (RULE expr (BLOCK (ALT expr OPMais expr) (ALT expr OPMenos expr) (ALT expr OPDiv expr) (ALT expr OPMult expr) (ALT AbreParentese cexpr FechaParentese) (ALT ID) (ALT INT) (ALT CHAR))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE CHAR (BLOCK (ALT '\'' (BLOCK (ALT [0-9A-Za-z]) (ALT '\\' (BLOCK (ALT [a-f]) (ALT [0-9]) (ALT [1-9] [0-9]) (ALT '1' [0-2] [0-7])))) '\''))) (RULE AbreChave (BLOCK (ALT '{'))) (RULE FechaChave (BLOCK (ALT '}'))) (RULE AbreParentese (BLOCK (ALT '('))) (RULE FechaParentese (BLOCK (ALT ')'))) (RULE TipotInt (BLOCK (ALT 'INT'))) (RULE TipoReal (BLOCK (ALT 'REAL'))) (RULE TipoChar (BLOCK (ALT 'CHAR'))) (RULE PVirg (BLOCK (ALT ';'))) (RULE OPAtrib (BLOCK (ALT ':='))) (RULE SE (BLOCK (ALT 'SE'))) (RULE SENAO (BLOCK (ALT 'SENAO'))) (RULE ENQUANTO (BLOCK (ALT 'ENQUANTO'))) (RULE FACA (BLOCK (ALT 'FACA'))) (RULE VIRG (BLOCK (ALT ','))) (RULE OPAnd (BLOCK (ALT 'AND'))) (RULE OPOr (BLOCK (ALT 'OR'))) (RULE OPMaior (BLOCK (ALT '>'))) (RULE OPMenor (BLOCK (ALT '<'))) (RULE OPIgual (BLOCK (ALT '=='))) (RULE OPMais (BLOCK (ALT '+'))) (RULE OPDiv (BLOCK (ALT '/'))) (RULE OPMenos (BLOCK (ALT '-'))) (RULE OPMult (BLOCK (ALT '*'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2020-12-10 16:14:03:289 grammar LogManager.java:25 after: (COMBINED_GRAMMAR estudol (RULES (RULE inicio (BLOCK (ALT 'programa' ID corpo))) (RULE corpo (BLOCK (ALT AbreChave secaoVariaveis listaComandos FechaChave))) (RULE secaoVariaveis (BLOCK (ALT 'vars' ':' listDecVariavel PVirg))) (RULE listDecVariavel (BLOCK (ALT listDecVariavel VIRG varDec) (ALT varDec))) (RULE varDec (BLOCK (ALT tipos ID))) (RULE tipos (BLOCK (ALT (SET TipotInt TipoReal TipoChar)))) (RULE bloco (BLOCK (ALT AbreChave listaComandos FechaChave))) (RULE listaComandos (BLOCK (ALT listaComandos command) (ALT command))) (RULE command (BLOCK (ALT singleCmd PVirg) (ALT stmt))) (RULE singleCmd (BLOCK (ALT ID OPAtrib cexpr))) (RULE stmt (BLOCK (ALT SE AbreParentese cexpr FechaParentese bloco) (ALT SE AbreParentese cexpr FechaParentese bloco SENAO bloco) (ALT ENQUANTO AbreParentese cexpr FechaParentese bloco) (ALT FACA bloco ENQUANTO cexpr))) (RULE cexpr (BLOCK (ALT cexpr OPAnd cexpr) (ALT cexpr OPOr cexpr) (ALT expr OPIgual expr) (ALT expr OPMaior expr) (ALT expr OPMenor expr) (ALT expr))) (RULE expr (BLOCK (ALT expr OPMais expr) (ALT expr OPMenos expr) (ALT expr OPDiv expr) (ALT expr OPMult expr) (ALT AbreParentese cexpr FechaParentese) (ALT ID) (ALT INT) (ALT CHAR))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE CHAR (BLOCK (ALT '\'' (BLOCK (ALT [0-9A-Za-z]) (ALT '\\' (BLOCK (ALT [a-f]) (ALT [0-9]) (ALT [1-9] [0-9]) (ALT '1' [0-2] [0-7])))) '\''))) (RULE AbreChave (BLOCK (ALT '{'))) (RULE FechaChave (BLOCK (ALT '}'))) (RULE AbreParentese (BLOCK (ALT '('))) (RULE FechaParentese (BLOCK (ALT ')'))) (RULE TipotInt (BLOCK (ALT 'INT'))) (RULE TipoReal (BLOCK (ALT 'REAL'))) (RULE TipoChar (BLOCK (ALT 'CHAR'))) (RULE PVirg (BLOCK (ALT ';'))) (RULE OPAtrib (BLOCK (ALT ':='))) (RULE SE (BLOCK (ALT 'SE'))) (RULE SENAO (BLOCK (ALT 'SENAO'))) (RULE ENQUANTO (BLOCK (ALT 'ENQUANTO'))) (RULE FACA (BLOCK (ALT 'FACA'))) (RULE VIRG (BLOCK (ALT ','))) (RULE OPAnd (BLOCK (ALT 'AND'))) (RULE OPOr (BLOCK (ALT 'OR'))) (RULE OPMaior (BLOCK (ALT '>'))) (RULE OPMenor (BLOCK (ALT '<'))) (RULE OPIgual (BLOCK (ALT '=='))) (RULE OPMais (BLOCK (ALT '+'))) (RULE OPDiv (BLOCK (ALT '/'))) (RULE OPMenos (BLOCK (ALT '-'))) (RULE OPMult (BLOCK (ALT '*'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2020-12-10 16:14:03:313 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR estudol (RULES (RULE inicio (BLOCK (ALT 'programa' ID corpo))) (RULE corpo (BLOCK (ALT AbreChave secaoVariaveis listaComandos FechaChave))) (RULE secaoVariaveis (BLOCK (ALT 'vars' ':' listDecVariavel PVirg))) (RULE listDecVariavel (BLOCK (ALT listDecVariavel VIRG varDec) (ALT varDec))) (RULE varDec (BLOCK (ALT tipos ID))) (RULE tipos (BLOCK (ALT (SET TipotInt TipoReal TipoChar)))) (RULE bloco (BLOCK (ALT AbreChave listaComandos FechaChave))) (RULE listaComandos (BLOCK (ALT listaComandos command) (ALT command))) (RULE command (BLOCK (ALT singleCmd PVirg) (ALT stmt))) (RULE singleCmd (BLOCK (ALT ID OPAtrib cexpr))) (RULE stmt (BLOCK (ALT SE AbreParentese cexpr FechaParentese bloco) (ALT SE AbreParentese cexpr FechaParentese bloco SENAO bloco) (ALT ENQUANTO AbreParentese cexpr FechaParentese bloco) (ALT FACA bloco ENQUANTO cexpr))) (RULE cexpr (BLOCK (ALT cexpr OPAnd cexpr) (ALT cexpr OPOr cexpr) (ALT expr OPIgual expr) (ALT expr OPMaior expr) (ALT expr OPMenor expr) (ALT expr))) (RULE expr (BLOCK (ALT expr OPMais expr) (ALT expr OPMenos expr) (ALT expr OPDiv expr) (ALT expr OPMult expr) (ALT AbreParentese cexpr FechaParentese) (ALT ID) (ALT INT) (ALT CHAR)))))
2020-12-10 16:14:03:313 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR estudolLexer (RULES (RULE T__0 (BLOCK (ALT 'programa'))) (RULE T__1 (BLOCK (ALT 'vars'))) (RULE T__2 (BLOCK (ALT ':'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE CHAR (BLOCK (ALT '\'' (BLOCK (ALT [0-9A-Za-z]) (ALT '\\' (BLOCK (ALT [a-f]) (ALT [0-9]) (ALT [1-9] [0-9]) (ALT '1' [0-2] [0-7])))) '\''))) (RULE AbreChave (BLOCK (ALT '{'))) (RULE FechaChave (BLOCK (ALT '}'))) (RULE AbreParentese (BLOCK (ALT '('))) (RULE FechaParentese (BLOCK (ALT ')'))) (RULE TipotInt (BLOCK (ALT 'INT'))) (RULE TipoReal (BLOCK (ALT 'REAL'))) (RULE TipoChar (BLOCK (ALT 'CHAR'))) (RULE PVirg (BLOCK (ALT ';'))) (RULE OPAtrib (BLOCK (ALT ':='))) (RULE SE (BLOCK (ALT 'SE'))) (RULE SENAO (BLOCK (ALT 'SENAO'))) (RULE ENQUANTO (BLOCK (ALT 'ENQUANTO'))) (RULE FACA (BLOCK (ALT 'FACA'))) (RULE VIRG (BLOCK (ALT ','))) (RULE OPAnd (BLOCK (ALT 'AND'))) (RULE OPOr (BLOCK (ALT 'OR'))) (RULE OPMaior (BLOCK (ALT '>'))) (RULE OPMenor (BLOCK (ALT '<'))) (RULE OPIgual (BLOCK (ALT '=='))) (RULE OPMais (BLOCK (ALT '+'))) (RULE OPDiv (BLOCK (ALT '/'))) (RULE OPMenos (BLOCK (ALT '-'))) (RULE OPMult (BLOCK (ALT '*'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2020-12-10 16:14:03:660 left-recursion LogManager.java:25 listDecVariavel
    :   ( {} varDec<tokenIndex=55> 
        )
        (
          {precpred(_ctx, 2)}?<p=2> VIRG<tokenIndex=49> varDec<tokenIndex=51>
        )*
    ;
2020-12-10 16:14:03:667 grammar LogManager.java:25 added: (RULE listDecVariavel (BLOCK (ALT (BLOCK (ALT {} (varDec (ELEMENT_OPTIONS (= tokenIndex 55))))) (* (BLOCK (ALT ({precpred(_ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (VIRG (ELEMENT_OPTIONS (= tokenIndex 49))) (varDec (ELEMENT_OPTIONS (= tokenIndex 51)))))))))
2020-12-10 16:14:03:670 left-recursion LogManager.java:25 listaComandos
    :   ( {} command<tokenIndex=102> 
        )
        (
          {precpred(_ctx, 2)}?<p=2> command<tokenIndex=98>
        )*
    ;
2020-12-10 16:14:03:673 grammar LogManager.java:25 added: (RULE listaComandos (BLOCK (ALT (BLOCK (ALT {} (command (ELEMENT_OPTIONS (= tokenIndex 102))))) (* (BLOCK (ALT ({precpred(_ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (command (ELEMENT_OPTIONS (= tokenIndex 98)))))))))
2020-12-10 16:14:03:682 left-recursion LogManager.java:25 cexpr
    :   ( {} expr<tokenIndex=200> OPIgual<tokenIndex=202> expr<tokenIndex=204> 
        | expr<tokenIndex=207> OPMaior<tokenIndex=209> expr<tokenIndex=211> 
        | expr<tokenIndex=214> OPMenor<tokenIndex=216> expr<tokenIndex=218> 
        | expr<tokenIndex=221> 
        )
        (
          {precpred(_ctx, 6)}?<p=6> OPAnd<tokenIndex=188> cexpr<tokenIndex=190,p=7>
                  | {precpred(_ctx, 5)}?<p=5> OPOr<tokenIndex=195> cexpr<tokenIndex=197,p=6>
        )*
    ;
2020-12-10 16:14:03:687 grammar LogManager.java:25 added: (RULE cexpr (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 200))) (OPIgual (ELEMENT_OPTIONS (= tokenIndex 202))) (expr (ELEMENT_OPTIONS (= tokenIndex 204)))) (ALT (expr (ELEMENT_OPTIONS (= tokenIndex 207))) (OPMaior (ELEMENT_OPTIONS (= tokenIndex 209))) (expr (ELEMENT_OPTIONS (= tokenIndex 211)))) (ALT (expr (ELEMENT_OPTIONS (= tokenIndex 214))) (OPMenor (ELEMENT_OPTIONS (= tokenIndex 216))) (expr (ELEMENT_OPTIONS (= tokenIndex 218)))) (ALT (expr (ELEMENT_OPTIONS (= tokenIndex 221))))) (* (BLOCK (ALT ({precpred(_ctx, 6)}? (ELEMENT_OPTIONS (= p 6))) (OPAnd (ELEMENT_OPTIONS (= tokenIndex 188))) (cexpr (ELEMENT_OPTIONS (= tokenIndex 190) (= p 7)))) (ALT ({precpred(_ctx, 5)}? (ELEMENT_OPTIONS (= p 5))) (OPOr (ELEMENT_OPTIONS (= tokenIndex 195))) (cexpr (ELEMENT_OPTIONS (= tokenIndex 197) (= p 6)))))))))
2020-12-10 16:14:03:693 left-recursion LogManager.java:25 expr
    :   ( {} AbreParentese<tokenIndex=256> cexpr<tokenIndex=258> FechaParentese<tokenIndex=260> 
        | ID<tokenIndex=263> 
        | INT<tokenIndex=266> 
        | CHAR<tokenIndex=269> 
        )
        (
          {precpred(_ctx, 8)}?<p=8> OPMais<tokenIndex=230> expr<tokenIndex=232,p=9>
                  | {precpred(_ctx, 7)}?<p=7> OPMenos<tokenIndex=237> expr<tokenIndex=239,p=8>
                  | {precpred(_ctx, 6)}?<p=6> OPDiv<tokenIndex=244> expr<tokenIndex=246,p=7>
                  | {precpred(_ctx, 5)}?<p=5> OPMult<tokenIndex=251> expr<tokenIndex=253,p=6>
        )*
    ;
2020-12-10 16:14:03:697 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (AbreParentese (ELEMENT_OPTIONS (= tokenIndex 256))) (cexpr (ELEMENT_OPTIONS (= tokenIndex 258))) (FechaParentese (ELEMENT_OPTIONS (= tokenIndex 260)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 263)))) (ALT (INT (ELEMENT_OPTIONS (= tokenIndex 266)))) (ALT (CHAR (ELEMENT_OPTIONS (= tokenIndex 269))))) (* (BLOCK (ALT ({precpred(_ctx, 8)}? (ELEMENT_OPTIONS (= p 8))) (OPMais (ELEMENT_OPTIONS (= tokenIndex 230))) (expr (ELEMENT_OPTIONS (= tokenIndex 232) (= p 9)))) (ALT ({precpred(_ctx, 7)}? (ELEMENT_OPTIONS (= p 7))) (OPMenos (ELEMENT_OPTIONS (= tokenIndex 237))) (expr (ELEMENT_OPTIONS (= tokenIndex 239) (= p 8)))) (ALT ({precpred(_ctx, 6)}? (ELEMENT_OPTIONS (= p 6))) (OPDiv (ELEMENT_OPTIONS (= tokenIndex 244))) (expr (ELEMENT_OPTIONS (= tokenIndex 246) (= p 7)))) (ALT ({precpred(_ctx, 5)}? (ELEMENT_OPTIONS (= p 5))) (OPMult (ELEMENT_OPTIONS (= tokenIndex 251))) (expr (ELEMENT_OPTIONS (= tokenIndex 253) (= p 6)))))))))
2020-12-10 16:14:03:699 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, INT=4, ID=5, CHAR=6, AbreChave=7, FechaChave=8, AbreParentese=9, FechaParentese=10, TipotInt=11, TipoReal=12, TipoChar=13, PVirg=14, OPAtrib=15, SE=16, SENAO=17, ENQUANTO=18, FACA=19, VIRG=20, OPAnd=21, OPOr=22, OPMaior=23, OPMenor=24, OPIgual=25, OPMais=26, OPDiv=27, OPMenos=28, OPMult=29, WS=30}
2020-12-10 16:14:03:699 semantics LogManager.java:25 strings={'programa'=1, 'vars'=2, ':'=3, '{'=7, '}'=8, '('=9, ')'=10, 'INT'=11, 'REAL'=12, 'CHAR'=13, ';'=14, ':='=15, 'SE'=16, 'SENAO'=17, 'ENQUANTO'=18, 'FACA'=19, ','=20, 'AND'=21, 'OR'=22, '>'=23, '<'=24, '=='=25, '+'=26, '/'=27, '-'=28, '*'=29}
2020-12-10 16:14:03:715 LL1 LogManager.java:25 
DECISION 0 in rule listDecVariavel
2020-12-10 16:14:03:716 LL1 LogManager.java:25 look=[null, 14]
2020-12-10 16:14:03:716 LL1 LogManager.java:25 LL(1)? false
2020-12-10 16:14:03:716 LL1 LogManager.java:25 
DECISION 1 in rule listaComandos
2020-12-10 16:14:03:716 LL1 LogManager.java:25 look=[null, 8]
2020-12-10 16:14:03:716 LL1 LogManager.java:25 LL(1)? false
2020-12-10 16:14:03:716 LL1 LogManager.java:25 
DECISION 2 in rule command
2020-12-10 16:14:03:716 LL1 LogManager.java:25 look=[5, {16, 18..19}]
2020-12-10 16:14:03:716 LL1 LogManager.java:25 LL(1)? true
2020-12-10 16:14:03:716 LL1 LogManager.java:25 
DECISION 3 in rule stmt
2020-12-10 16:14:03:716 LL1 LogManager.java:25 look=[16, 16, 18, 19]
2020-12-10 16:14:03:716 LL1 LogManager.java:25 LL(1)? false
2020-12-10 16:14:03:716 LL1 LogManager.java:25 
DECISION 4 in rule cexpr
2020-12-10 16:14:03:717 LL1 LogManager.java:25 look=[{4..6, 9}, {4..6, 9}, {4..6, 9}, {4..6, 9}]
2020-12-10 16:14:03:718 LL1 LogManager.java:25 LL(1)? false
2020-12-10 16:14:03:718 LL1 LogManager.java:25 
DECISION 5 in rule cexpr
2020-12-10 16:14:03:718 LL1 LogManager.java:25 look=[null, null]
2020-12-10 16:14:03:718 LL1 LogManager.java:25 LL(1)? false
2020-12-10 16:14:03:718 LL1 LogManager.java:25 
DECISION 6 in rule cexpr
2020-12-10 16:14:03:719 LL1 LogManager.java:25 look=[null, null]
2020-12-10 16:14:03:719 LL1 LogManager.java:25 LL(1)? false
2020-12-10 16:14:03:719 LL1 LogManager.java:25 
DECISION 7 in rule expr
2020-12-10 16:14:03:719 LL1 LogManager.java:25 look=[9, 5, 4, 6]
2020-12-10 16:14:03:719 LL1 LogManager.java:25 LL(1)? true
2020-12-10 16:14:03:719 LL1 LogManager.java:25 
DECISION 8 in rule expr
2020-12-10 16:14:03:719 LL1 LogManager.java:25 look=[null, null, null, null]
2020-12-10 16:14:03:719 LL1 LogManager.java:25 LL(1)? false
2020-12-10 16:14:03:719 LL1 LogManager.java:25 
DECISION 9 in rule expr
2020-12-10 16:14:03:720 LL1 LogManager.java:25 look=[null, null]
2020-12-10 16:14:03:720 LL1 LogManager.java:25 LL(1)? false
2020-12-10 16:14:03:745 action-translator LogManager.java:25 translate 
2020-12-10 16:14:03:746 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2020-12-10 16:14:03:747 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2020-12-10 16:14:03:750 action-translator LogManager.java:25 translate 
2020-12-10 16:14:03:750 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2020-12-10 16:14:03:751 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2020-12-10 16:14:03:760 action-translator LogManager.java:25 translate 
2020-12-10 16:14:03:761 action-translator LogManager.java:25 translate precpred(_ctx, 6)
2020-12-10 16:14:03:761 action-translator LogManager.java:25 translate precpred(_ctx, 5)
2020-12-10 16:14:03:762 action-translator LogManager.java:25 translate precpred(_ctx, 6)
2020-12-10 16:14:03:762 action-translator LogManager.java:25 translate precpred(_ctx, 5)
2020-12-10 16:14:03:763 action-translator LogManager.java:25 translate 
2020-12-10 16:14:03:764 action-translator LogManager.java:25 translate precpred(_ctx, 8)
2020-12-10 16:14:03:764 action-translator LogManager.java:25 translate precpred(_ctx, 7)
2020-12-10 16:14:03:764 action-translator LogManager.java:25 translate precpred(_ctx, 6)
2020-12-10 16:14:03:765 action-translator LogManager.java:25 translate precpred(_ctx, 5)
2020-12-10 16:14:03:765 action-translator LogManager.java:25 translate precpred(_ctx, 8)
2020-12-10 16:14:03:765 action-translator LogManager.java:25 translate precpred(_ctx, 7)
2020-12-10 16:14:03:765 action-translator LogManager.java:25 translate precpred(_ctx, 6)
2020-12-10 16:14:03:765 action-translator LogManager.java:25 translate precpred(_ctx, 5)
