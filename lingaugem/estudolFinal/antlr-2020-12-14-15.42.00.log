2020-12-14 15:41:59:725 grammar LogManager.java:25 before: (COMBINED_GRAMMAR estudol (RULES (RULE inicio (BLOCK (ALT PROGRAMA ID corpo))) (RULE corpo (BLOCK (ALT AbreChave secaoVariaveis listaComandos FechaChave))) (RULE secaoVariaveis (BLOCK (ALT VARS Doispontos listDecVariavel PVirg) (ALT EPSILON))) (RULE listDecVariavel (BLOCK (ALT varDec listDecVariavel1))) (RULE listDecVariavel1 (BLOCK (ALT VIRG varDec listDecVariavel1) (ALT EPSILON))) (RULE varDec (BLOCK (ALT TipoInt ID) (ALT TipoReal ID) (ALT TipoChar ID))) (RULE listaComandos (BLOCK (ALT stmt))) (RULE stmt_aux (BLOCK (ALT PVirg listaComandos) (ALT EPSILON))) (RULE stmt (BLOCK (ALT assign_stmt stmt_aux) (ALT if_then_stmt stmt_aux) (ALT do_while_stmt stmt_aux) (ALT while_stmt stmt_aux) (ALT EPSILON))) (RULE assign_stmt (BLOCK (ALT ID OPAtrib expr))) (RULE if_then_stmt (BLOCK (ALT SE AbreParentese logicalExp FechaParentese ENTAO corpo stmtSENAO))) (RULE stmtSENAO (BLOCK (ALT SENAO corpo) (ALT EPSILON))) (RULE do_while_stmt (BLOCK (ALT FACA corpo ENQUANTO AbreParentese logicalExp FechaParentese))) (RULE while_stmt (BLOCK (ALT ENQUANTO AbreParentese logicalExp FechaParentese corpo))) (RULE expr (BLOCK (ALT term opArith1))) (RULE term (BLOCK (ALT fator opArith2))) (RULE fator (BLOCK (ALT opArith1) (ALT INT) (ALT REAL) (ALT AbreParentese expr FechaParentese) (ALT ID))) (RULE opArith1 (BLOCK (ALT OPMais term) (ALT OPMenos term) (ALT EPSILON))) (RULE opArith2 (BLOCK (ALT OPMult fator) (ALT OPDiv fator) (ALT EPSILON))) (RULE logicalExp (BLOCK (ALT logicalStmt opLogic))) (RULE opLogic (BLOCK (ALT OPAnd logicalStmt) (ALT OPOr logicalStmt) (ALT EPSILON))) (RULE logicalStmt (BLOCK (ALT expr opRelac))) (RULE opRelac (BLOCK (ALT OPMaior expr) (ALT OPMenor expr) (ALT OPIgual expr) (ALT OPMaiorIgual expr) (ALT OPMenorIgual expr) (ALT OPDiferente expr) (ALT EPSILON))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DIGIT (BLOCK (ALT [0-9]))) (RULE REAL (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) DOT (* (BLOCK (ALT DIGIT)))))) (RULE DOT (BLOCK (ALT '.'))) (RULE SE (BLOCK (ALT 'SE'))) (RULE SENAO (BLOCK (ALT 'SENAO'))) (RULE ENQUANTO (BLOCK (ALT 'ENQUANTO'))) (RULE FACA (BLOCK (ALT 'FACA'))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-z0-9])))))) (RULE CHAR (BLOCK (ALT '\'' (BLOCK (ALT [0-9A-Za-z]) (ALT '\\' (BLOCK (ALT [a-f]) (ALT [0-9]) (ALT [1-9] [0-9]) (ALT '1' [0-2] [0-7])))) '\''))) (RULE AbreChave (BLOCK (ALT '{'))) (RULE FechaChave (BLOCK (ALT '}'))) (RULE AbreParentese (BLOCK (ALT '('))) (RULE FechaParentese (BLOCK (ALT ')'))) (RULE PROGRAMA (BLOCK (ALT 'PROGRAMA'))) (RULE VARS (BLOCK (ALT 'VARS'))) (RULE ENTAO (BLOCK (ALT 'ENTAO'))) (RULE Doispontos (BLOCK (ALT ':'))) (RULE TipoInt (BLOCK (ALT 'INT'))) (RULE TipoReal (BLOCK (ALT 'REAL'))) (RULE TipoChar (BLOCK (ALT 'CHAR'))) (RULE PVirg (BLOCK (ALT ';'))) (RULE OPAtrib (BLOCK (ALT ':='))) (RULE VIRG (BLOCK (ALT ','))) (RULE OPAnd (BLOCK (ALT 'AND'))) (RULE OPOr (BLOCK (ALT 'OR'))) (RULE OPMaior (BLOCK (ALT '>'))) (RULE OPMenor (BLOCK (ALT '<'))) (RULE OPIgual (BLOCK (ALT '=='))) (RULE OPMaiorIgual (BLOCK (ALT '>='))) (RULE OPMenorIgual (BLOCK (ALT '<='))) (RULE OPDiferente (BLOCK (ALT '<>'))) (RULE OPMais (BLOCK (ALT '+'))) (RULE OPDiv (BLOCK (ALT '/'))) (RULE OPMenos (BLOCK (ALT '-'))) (RULE OPMult (BLOCK (ALT '*'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2020-12-14 15:41:59:750 grammar LogManager.java:25 after: (COMBINED_GRAMMAR estudol (RULES (RULE inicio (BLOCK (ALT PROGRAMA ID corpo))) (RULE corpo (BLOCK (ALT AbreChave secaoVariaveis listaComandos FechaChave))) (RULE secaoVariaveis (BLOCK (ALT VARS Doispontos listDecVariavel PVirg) (ALT EPSILON))) (RULE listDecVariavel (BLOCK (ALT varDec listDecVariavel1))) (RULE listDecVariavel1 (BLOCK (ALT VIRG varDec listDecVariavel1) (ALT EPSILON))) (RULE varDec (BLOCK (ALT TipoInt ID) (ALT TipoReal ID) (ALT TipoChar ID))) (RULE listaComandos (BLOCK (ALT stmt))) (RULE stmt_aux (BLOCK (ALT PVirg listaComandos) (ALT EPSILON))) (RULE stmt (BLOCK (ALT assign_stmt stmt_aux) (ALT if_then_stmt stmt_aux) (ALT do_while_stmt stmt_aux) (ALT while_stmt stmt_aux) (ALT EPSILON))) (RULE assign_stmt (BLOCK (ALT ID OPAtrib expr))) (RULE if_then_stmt (BLOCK (ALT SE AbreParentese logicalExp FechaParentese ENTAO corpo stmtSENAO))) (RULE stmtSENAO (BLOCK (ALT SENAO corpo) (ALT EPSILON))) (RULE do_while_stmt (BLOCK (ALT FACA corpo ENQUANTO AbreParentese logicalExp FechaParentese))) (RULE while_stmt (BLOCK (ALT ENQUANTO AbreParentese logicalExp FechaParentese corpo))) (RULE expr (BLOCK (ALT term opArith1))) (RULE term (BLOCK (ALT fator opArith2))) (RULE fator (BLOCK (ALT opArith1) (ALT INT) (ALT REAL) (ALT AbreParentese expr FechaParentese) (ALT ID))) (RULE opArith1 (BLOCK (ALT OPMais term) (ALT OPMenos term) (ALT EPSILON))) (RULE opArith2 (BLOCK (ALT OPMult fator) (ALT OPDiv fator) (ALT EPSILON))) (RULE logicalExp (BLOCK (ALT logicalStmt opLogic))) (RULE opLogic (BLOCK (ALT OPAnd logicalStmt) (ALT OPOr logicalStmt) (ALT EPSILON))) (RULE logicalStmt (BLOCK (ALT expr opRelac))) (RULE opRelac (BLOCK (ALT OPMaior expr) (ALT OPMenor expr) (ALT OPIgual expr) (ALT OPMaiorIgual expr) (ALT OPMenorIgual expr) (ALT OPDiferente expr) (ALT EPSILON))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DIGIT (BLOCK (ALT [0-9]))) (RULE REAL (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) DOT (* (BLOCK (ALT DIGIT)))))) (RULE DOT (BLOCK (ALT '.'))) (RULE SE (BLOCK (ALT 'SE'))) (RULE SENAO (BLOCK (ALT 'SENAO'))) (RULE ENQUANTO (BLOCK (ALT 'ENQUANTO'))) (RULE FACA (BLOCK (ALT 'FACA'))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-z0-9])))))) (RULE CHAR (BLOCK (ALT '\'' (BLOCK (ALT [0-9A-Za-z]) (ALT '\\' (BLOCK (ALT [a-f]) (ALT [0-9]) (ALT [1-9] [0-9]) (ALT '1' [0-2] [0-7])))) '\''))) (RULE AbreChave (BLOCK (ALT '{'))) (RULE FechaChave (BLOCK (ALT '}'))) (RULE AbreParentese (BLOCK (ALT '('))) (RULE FechaParentese (BLOCK (ALT ')'))) (RULE PROGRAMA (BLOCK (ALT 'PROGRAMA'))) (RULE VARS (BLOCK (ALT 'VARS'))) (RULE ENTAO (BLOCK (ALT 'ENTAO'))) (RULE Doispontos (BLOCK (ALT ':'))) (RULE TipoInt (BLOCK (ALT 'INT'))) (RULE TipoReal (BLOCK (ALT 'REAL'))) (RULE TipoChar (BLOCK (ALT 'CHAR'))) (RULE PVirg (BLOCK (ALT ';'))) (RULE OPAtrib (BLOCK (ALT ':='))) (RULE VIRG (BLOCK (ALT ','))) (RULE OPAnd (BLOCK (ALT 'AND'))) (RULE OPOr (BLOCK (ALT 'OR'))) (RULE OPMaior (BLOCK (ALT '>'))) (RULE OPMenor (BLOCK (ALT '<'))) (RULE OPIgual (BLOCK (ALT '=='))) (RULE OPMaiorIgual (BLOCK (ALT '>='))) (RULE OPMenorIgual (BLOCK (ALT '<='))) (RULE OPDiferente (BLOCK (ALT '<>'))) (RULE OPMais (BLOCK (ALT '+'))) (RULE OPDiv (BLOCK (ALT '/'))) (RULE OPMenos (BLOCK (ALT '-'))) (RULE OPMult (BLOCK (ALT '*'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2020-12-14 15:41:59:782 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR estudol (RULES (RULE inicio (BLOCK (ALT PROGRAMA ID corpo))) (RULE corpo (BLOCK (ALT AbreChave secaoVariaveis listaComandos FechaChave))) (RULE secaoVariaveis (BLOCK (ALT VARS Doispontos listDecVariavel PVirg) (ALT EPSILON))) (RULE listDecVariavel (BLOCK (ALT varDec listDecVariavel1))) (RULE listDecVariavel1 (BLOCK (ALT VIRG varDec listDecVariavel1) (ALT EPSILON))) (RULE varDec (BLOCK (ALT TipoInt ID) (ALT TipoReal ID) (ALT TipoChar ID))) (RULE listaComandos (BLOCK (ALT stmt))) (RULE stmt_aux (BLOCK (ALT PVirg listaComandos) (ALT EPSILON))) (RULE stmt (BLOCK (ALT assign_stmt stmt_aux) (ALT if_then_stmt stmt_aux) (ALT do_while_stmt stmt_aux) (ALT while_stmt stmt_aux) (ALT EPSILON))) (RULE assign_stmt (BLOCK (ALT ID OPAtrib expr))) (RULE if_then_stmt (BLOCK (ALT SE AbreParentese logicalExp FechaParentese ENTAO corpo stmtSENAO))) (RULE stmtSENAO (BLOCK (ALT SENAO corpo) (ALT EPSILON))) (RULE do_while_stmt (BLOCK (ALT FACA corpo ENQUANTO AbreParentese logicalExp FechaParentese))) (RULE while_stmt (BLOCK (ALT ENQUANTO AbreParentese logicalExp FechaParentese corpo))) (RULE expr (BLOCK (ALT term opArith1))) (RULE term (BLOCK (ALT fator opArith2))) (RULE fator (BLOCK (ALT opArith1) (ALT INT) (ALT REAL) (ALT AbreParentese expr FechaParentese) (ALT ID))) (RULE opArith1 (BLOCK (ALT OPMais term) (ALT OPMenos term) (ALT EPSILON))) (RULE opArith2 (BLOCK (ALT OPMult fator) (ALT OPDiv fator) (ALT EPSILON))) (RULE logicalExp (BLOCK (ALT logicalStmt opLogic))) (RULE opLogic (BLOCK (ALT OPAnd logicalStmt) (ALT OPOr logicalStmt) (ALT EPSILON))) (RULE logicalStmt (BLOCK (ALT expr opRelac))) (RULE opRelac (BLOCK (ALT OPMaior expr) (ALT OPMenor expr) (ALT OPIgual expr) (ALT OPMaiorIgual expr) (ALT OPMenorIgual expr) (ALT OPDiferente expr) (ALT EPSILON)))))
2020-12-14 15:41:59:783 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR estudolLexer (RULES (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DIGIT (BLOCK (ALT [0-9]))) (RULE REAL (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) DOT (* (BLOCK (ALT DIGIT)))))) (RULE DOT (BLOCK (ALT '.'))) (RULE SE (BLOCK (ALT 'SE'))) (RULE SENAO (BLOCK (ALT 'SENAO'))) (RULE ENQUANTO (BLOCK (ALT 'ENQUANTO'))) (RULE FACA (BLOCK (ALT 'FACA'))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-z0-9])))))) (RULE CHAR (BLOCK (ALT '\'' (BLOCK (ALT [0-9A-Za-z]) (ALT '\\' (BLOCK (ALT [a-f]) (ALT [0-9]) (ALT [1-9] [0-9]) (ALT '1' [0-2] [0-7])))) '\''))) (RULE AbreChave (BLOCK (ALT '{'))) (RULE FechaChave (BLOCK (ALT '}'))) (RULE AbreParentese (BLOCK (ALT '('))) (RULE FechaParentese (BLOCK (ALT ')'))) (RULE PROGRAMA (BLOCK (ALT 'PROGRAMA'))) (RULE VARS (BLOCK (ALT 'VARS'))) (RULE ENTAO (BLOCK (ALT 'ENTAO'))) (RULE Doispontos (BLOCK (ALT ':'))) (RULE TipoInt (BLOCK (ALT 'INT'))) (RULE TipoReal (BLOCK (ALT 'REAL'))) (RULE TipoChar (BLOCK (ALT 'CHAR'))) (RULE PVirg (BLOCK (ALT ';'))) (RULE OPAtrib (BLOCK (ALT ':='))) (RULE VIRG (BLOCK (ALT ','))) (RULE OPAnd (BLOCK (ALT 'AND'))) (RULE OPOr (BLOCK (ALT 'OR'))) (RULE OPMaior (BLOCK (ALT '>'))) (RULE OPMenor (BLOCK (ALT '<'))) (RULE OPIgual (BLOCK (ALT '=='))) (RULE OPMaiorIgual (BLOCK (ALT '>='))) (RULE OPMenorIgual (BLOCK (ALT '<='))) (RULE OPDiferente (BLOCK (ALT '<>'))) (RULE OPMais (BLOCK (ALT '+'))) (RULE OPDiv (BLOCK (ALT '/'))) (RULE OPMenos (BLOCK (ALT '-'))) (RULE OPMult (BLOCK (ALT '*'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2020-12-14 15:42:00:181 semantics LogManager.java:25 tokens={EOF=-1, INT=1, DIGIT=2, REAL=3, DOT=4, SE=5, SENAO=6, ENQUANTO=7, FACA=8, ID=9, CHAR=10, AbreChave=11, FechaChave=12, AbreParentese=13, FechaParentese=14, PROGRAMA=15, VARS=16, ENTAO=17, Doispontos=18, TipoInt=19, TipoReal=20, TipoChar=21, PVirg=22, OPAtrib=23, VIRG=24, OPAnd=25, OPOr=26, OPMaior=27, OPMenor=28, OPIgual=29, OPMaiorIgual=30, OPMenorIgual=31, OPDiferente=32, OPMais=33, OPDiv=34, OPMenos=35, OPMult=36, WS=37}
2020-12-14 15:42:00:181 semantics LogManager.java:25 strings={'.'=4, 'SE'=5, 'SENAO'=6, 'ENQUANTO'=7, 'FACA'=8, '{'=11, '}'=12, '('=13, ')'=14, 'PROGRAMA'=15, 'VARS'=16, 'ENTAO'=17, ':'=18, 'INT'=19, 'REAL'=20, 'CHAR'=21, ';'=22, ':='=23, ','=24, 'AND'=25, 'OR'=26, '>'=27, '<'=28, '=='=29, '>='=30, '<='=31, '<>'=32, '+'=33, '/'=34, '-'=35, '*'=36}
2020-12-14 15:42:00:193 LL1 LogManager.java:25 
DECISION 0 in rule secaoVariaveis
2020-12-14 15:42:00:194 LL1 LogManager.java:25 look=[16, {5, 7..9, 12}]
2020-12-14 15:42:00:194 LL1 LogManager.java:25 LL(1)? true
2020-12-14 15:42:00:194 LL1 LogManager.java:25 
DECISION 1 in rule listDecVariavel1
2020-12-14 15:42:00:194 LL1 LogManager.java:25 look=[24, 22]
2020-12-14 15:42:00:194 LL1 LogManager.java:25 LL(1)? true
2020-12-14 15:42:00:194 LL1 LogManager.java:25 
DECISION 2 in rule varDec
2020-12-14 15:42:00:194 LL1 LogManager.java:25 look=[19, 20, 21]
2020-12-14 15:42:00:194 LL1 LogManager.java:25 LL(1)? true
2020-12-14 15:42:00:194 LL1 LogManager.java:25 
DECISION 3 in rule stmt_aux
2020-12-14 15:42:00:194 LL1 LogManager.java:25 look=[22, 12]
2020-12-14 15:42:00:194 LL1 LogManager.java:25 LL(1)? true
2020-12-14 15:42:00:194 LL1 LogManager.java:25 
DECISION 4 in rule stmt
2020-12-14 15:42:00:195 LL1 LogManager.java:25 look=[9, 5, 8, 7, 12]
2020-12-14 15:42:00:195 LL1 LogManager.java:25 LL(1)? true
2020-12-14 15:42:00:195 LL1 LogManager.java:25 
DECISION 5 in rule stmtSENAO
2020-12-14 15:42:00:195 LL1 LogManager.java:25 look=[6, {12, 22}]
2020-12-14 15:42:00:195 LL1 LogManager.java:25 LL(1)? true
2020-12-14 15:42:00:195 LL1 LogManager.java:25 
DECISION 6 in rule fator
2020-12-14 15:42:00:195 LL1 LogManager.java:25 look=[{12, 14, 22, 25..36}, 1, 3, 13, 9]
2020-12-14 15:42:00:195 LL1 LogManager.java:25 LL(1)? true
2020-12-14 15:42:00:195 LL1 LogManager.java:25 
DECISION 7 in rule opArith1
2020-12-14 15:42:00:196 LL1 LogManager.java:25 look=[33, 35, {12, 14, 22, 25..36}]
2020-12-14 15:42:00:196 LL1 LogManager.java:25 LL(1)? false
2020-12-14 15:42:00:196 LL1 LogManager.java:25 
DECISION 8 in rule opArith2
2020-12-14 15:42:00:197 LL1 LogManager.java:25 look=[36, 34, {12, 14, 22, 25..36}]
2020-12-14 15:42:00:197 LL1 LogManager.java:25 LL(1)? false
2020-12-14 15:42:00:197 LL1 LogManager.java:25 
DECISION 9 in rule opLogic
2020-12-14 15:42:00:197 LL1 LogManager.java:25 look=[25, 26, 14]
2020-12-14 15:42:00:197 LL1 LogManager.java:25 LL(1)? true
2020-12-14 15:42:00:197 LL1 LogManager.java:25 
DECISION 10 in rule opRelac
2020-12-14 15:42:00:197 LL1 LogManager.java:25 look=[27, 28, 29, 30, 31, 32, {14, 25..26}]
2020-12-14 15:42:00:197 LL1 LogManager.java:25 LL(1)? true
