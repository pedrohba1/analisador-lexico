2020-12-13 22:25:33:751 grammar LogManager.java:25 before: (COMBINED_GRAMMAR estudol (RULES (RULE inicio (BLOCK (ALT PROGRAMA ID corpo))) (RULE corpo (BLOCK (ALT AbreChave secaoVariaveis listaComandos FechaChave))) (RULE secaoVariaveis (BLOCK (ALT VARS Doispontos listDecVariavel PVirg))) (RULE listDecVariavel (BLOCK (ALT TipoInt ID listDecVariavel1) (ALT TipoReal ID listDecVariavel1) (ALT TipoChar ID listDecVariavel1))) (RULE listDecVariavel1 (BLOCK (ALT VIRG TipoInt ID listDecVariavel1) (ALT VIRG TipoReal ID listDecVariavel1) (ALT VIRG TipoChar ID listDecVariavel1) (ALT EPSILON))) (RULE listaComandos (BLOCK (ALT stmt) (ALT stmt PVirg listaComandos))) (RULE stmt (BLOCK (ALT assign_stmt) (ALT if_then_stmt) (ALT do_while_stmt) (ALT while_stmt) (ALT EPSILON))) (RULE assign_stmt (BLOCK (ALT ID OPAtrib expr PVirg))) (RULE if_then_stmt (BLOCK (ALT SE AbreParentese logicalExp FechaParentese ENTAO corpo))) (RULE do_while_stmt (BLOCK (ALT FACA corpo ENQUANTO AbreParentese logicalExp FechaParentese))) (RULE while_stmt (BLOCK (ALT ENQUANTO AbreParentese logicalExp FechaParentese corpo))) (RULE expr (BLOCK (ALT term OPMais term) (ALT term OPMenos term) (ALT term))) (RULE term (BLOCK (ALT fator OPMult fator) (ALT fator OPDiv fator) (ALT fator))) (RULE fator (BLOCK (ALT fator OPMais fator) (ALT fator OPMenos fator) (ALT INT) (ALT REAL) (ALT AbreParentese expr FechaParentese) (ALT ID))) (RULE logicalExp (BLOCK (ALT logicalStmt OPAnd logicalStmt) (ALT logicalStmt OPOr logicalStmt) (ALT logicalStmt))) (RULE logicalStmt (BLOCK (ALT expr OPMaior expr) (ALT expr OPMenor expr) (ALT expr OPIgual expr) (ALT expr OPMaiorIgual expr) (ALT expr OPDiferente expr) (ALT expr OPMenorIgual expr) (ALT expr))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DIGIT (BLOCK (ALT [0-9]))) (RULE REAL (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) DOT (* (BLOCK (ALT DIGIT)))))) (RULE DOT (BLOCK (ALT '.'))) (RULE SE (BLOCK (ALT 'SE'))) (RULE SENAO (BLOCK (ALT 'SENAO'))) (RULE ENQUANTO (BLOCK (ALT 'ENQUANTO'))) (RULE FACA (BLOCK (ALT 'FACA'))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-z0-9])))))) (RULE CHAR (BLOCK (ALT '\'' (BLOCK (ALT [0-9A-Za-z]) (ALT '\\' (BLOCK (ALT [a-f]) (ALT [0-9]) (ALT [1-9] [0-9]) (ALT '1' [0-2] [0-7])))) '\''))) (RULE AbreChave (BLOCK (ALT '{'))) (RULE FechaChave (BLOCK (ALT '}'))) (RULE AbreParentese (BLOCK (ALT '('))) (RULE FechaParentese (BLOCK (ALT ')'))) (RULE PROGRAMA (BLOCK (ALT 'PROGRAMA'))) (RULE VARS (BLOCK (ALT 'VARS'))) (RULE ENTAO (BLOCK (ALT 'ENTAO'))) (RULE Doispontos (BLOCK (ALT ':'))) (RULE TipoInt (BLOCK (ALT 'INT'))) (RULE TipoReal (BLOCK (ALT 'REAL'))) (RULE TipoChar (BLOCK (ALT 'CHAR'))) (RULE PVirg (BLOCK (ALT ';'))) (RULE OPAtrib (BLOCK (ALT ':='))) (RULE VIRG (BLOCK (ALT ','))) (RULE OPAnd (BLOCK (ALT 'AND'))) (RULE OPOr (BLOCK (ALT 'OR'))) (RULE OPMaior (BLOCK (ALT '>'))) (RULE OPMenor (BLOCK (ALT '<'))) (RULE OPIgual (BLOCK (ALT '=='))) (RULE OPMaiorIgual (BLOCK (ALT '>='))) (RULE OPMenorIgual (BLOCK (ALT '<='))) (RULE OPDiferente (BLOCK (ALT '<>'))) (RULE OPMais (BLOCK (ALT '+'))) (RULE OPDiv (BLOCK (ALT '/'))) (RULE OPMenos (BLOCK (ALT '-'))) (RULE OPMult (BLOCK (ALT '*'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2020-12-13 22:25:33:774 grammar LogManager.java:25 after: (COMBINED_GRAMMAR estudol (RULES (RULE inicio (BLOCK (ALT PROGRAMA ID corpo))) (RULE corpo (BLOCK (ALT AbreChave secaoVariaveis listaComandos FechaChave))) (RULE secaoVariaveis (BLOCK (ALT VARS Doispontos listDecVariavel PVirg))) (RULE listDecVariavel (BLOCK (ALT TipoInt ID listDecVariavel1) (ALT TipoReal ID listDecVariavel1) (ALT TipoChar ID listDecVariavel1))) (RULE listDecVariavel1 (BLOCK (ALT VIRG TipoInt ID listDecVariavel1) (ALT VIRG TipoReal ID listDecVariavel1) (ALT VIRG TipoChar ID listDecVariavel1) (ALT EPSILON))) (RULE listaComandos (BLOCK (ALT stmt) (ALT stmt PVirg listaComandos))) (RULE stmt (BLOCK (ALT assign_stmt) (ALT if_then_stmt) (ALT do_while_stmt) (ALT while_stmt) (ALT EPSILON))) (RULE assign_stmt (BLOCK (ALT ID OPAtrib expr PVirg))) (RULE if_then_stmt (BLOCK (ALT SE AbreParentese logicalExp FechaParentese ENTAO corpo))) (RULE do_while_stmt (BLOCK (ALT FACA corpo ENQUANTO AbreParentese logicalExp FechaParentese))) (RULE while_stmt (BLOCK (ALT ENQUANTO AbreParentese logicalExp FechaParentese corpo))) (RULE expr (BLOCK (ALT term OPMais term) (ALT term OPMenos term) (ALT term))) (RULE term (BLOCK (ALT fator OPMult fator) (ALT fator OPDiv fator) (ALT fator))) (RULE fator (BLOCK (ALT fator OPMais fator) (ALT fator OPMenos fator) (ALT INT) (ALT REAL) (ALT AbreParentese expr FechaParentese) (ALT ID))) (RULE logicalExp (BLOCK (ALT logicalStmt OPAnd logicalStmt) (ALT logicalStmt OPOr logicalStmt) (ALT logicalStmt))) (RULE logicalStmt (BLOCK (ALT expr OPMaior expr) (ALT expr OPMenor expr) (ALT expr OPIgual expr) (ALT expr OPMaiorIgual expr) (ALT expr OPDiferente expr) (ALT expr OPMenorIgual expr) (ALT expr))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DIGIT (BLOCK (ALT [0-9]))) (RULE REAL (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) DOT (* (BLOCK (ALT DIGIT)))))) (RULE DOT (BLOCK (ALT '.'))) (RULE SE (BLOCK (ALT 'SE'))) (RULE SENAO (BLOCK (ALT 'SENAO'))) (RULE ENQUANTO (BLOCK (ALT 'ENQUANTO'))) (RULE FACA (BLOCK (ALT 'FACA'))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-z0-9])))))) (RULE CHAR (BLOCK (ALT '\'' (BLOCK (ALT [0-9A-Za-z]) (ALT '\\' (BLOCK (ALT [a-f]) (ALT [0-9]) (ALT [1-9] [0-9]) (ALT '1' [0-2] [0-7])))) '\''))) (RULE AbreChave (BLOCK (ALT '{'))) (RULE FechaChave (BLOCK (ALT '}'))) (RULE AbreParentese (BLOCK (ALT '('))) (RULE FechaParentese (BLOCK (ALT ')'))) (RULE PROGRAMA (BLOCK (ALT 'PROGRAMA'))) (RULE VARS (BLOCK (ALT 'VARS'))) (RULE ENTAO (BLOCK (ALT 'ENTAO'))) (RULE Doispontos (BLOCK (ALT ':'))) (RULE TipoInt (BLOCK (ALT 'INT'))) (RULE TipoReal (BLOCK (ALT 'REAL'))) (RULE TipoChar (BLOCK (ALT 'CHAR'))) (RULE PVirg (BLOCK (ALT ';'))) (RULE OPAtrib (BLOCK (ALT ':='))) (RULE VIRG (BLOCK (ALT ','))) (RULE OPAnd (BLOCK (ALT 'AND'))) (RULE OPOr (BLOCK (ALT 'OR'))) (RULE OPMaior (BLOCK (ALT '>'))) (RULE OPMenor (BLOCK (ALT '<'))) (RULE OPIgual (BLOCK (ALT '=='))) (RULE OPMaiorIgual (BLOCK (ALT '>='))) (RULE OPMenorIgual (BLOCK (ALT '<='))) (RULE OPDiferente (BLOCK (ALT '<>'))) (RULE OPMais (BLOCK (ALT '+'))) (RULE OPDiv (BLOCK (ALT '/'))) (RULE OPMenos (BLOCK (ALT '-'))) (RULE OPMult (BLOCK (ALT '*'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2020-12-13 22:25:33:798 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR estudol (RULES (RULE inicio (BLOCK (ALT PROGRAMA ID corpo))) (RULE corpo (BLOCK (ALT AbreChave secaoVariaveis listaComandos FechaChave))) (RULE secaoVariaveis (BLOCK (ALT VARS Doispontos listDecVariavel PVirg))) (RULE listDecVariavel (BLOCK (ALT TipoInt ID listDecVariavel1) (ALT TipoReal ID listDecVariavel1) (ALT TipoChar ID listDecVariavel1))) (RULE listDecVariavel1 (BLOCK (ALT VIRG TipoInt ID listDecVariavel1) (ALT VIRG TipoReal ID listDecVariavel1) (ALT VIRG TipoChar ID listDecVariavel1) (ALT EPSILON))) (RULE listaComandos (BLOCK (ALT stmt) (ALT stmt PVirg listaComandos))) (RULE stmt (BLOCK (ALT assign_stmt) (ALT if_then_stmt) (ALT do_while_stmt) (ALT while_stmt) (ALT EPSILON))) (RULE assign_stmt (BLOCK (ALT ID OPAtrib expr PVirg))) (RULE if_then_stmt (BLOCK (ALT SE AbreParentese logicalExp FechaParentese ENTAO corpo))) (RULE do_while_stmt (BLOCK (ALT FACA corpo ENQUANTO AbreParentese logicalExp FechaParentese))) (RULE while_stmt (BLOCK (ALT ENQUANTO AbreParentese logicalExp FechaParentese corpo))) (RULE expr (BLOCK (ALT term OPMais term) (ALT term OPMenos term) (ALT term))) (RULE term (BLOCK (ALT fator OPMult fator) (ALT fator OPDiv fator) (ALT fator))) (RULE fator (BLOCK (ALT fator OPMais fator) (ALT fator OPMenos fator) (ALT INT) (ALT REAL) (ALT AbreParentese expr FechaParentese) (ALT ID))) (RULE logicalExp (BLOCK (ALT logicalStmt OPAnd logicalStmt) (ALT logicalStmt OPOr logicalStmt) (ALT logicalStmt))) (RULE logicalStmt (BLOCK (ALT expr OPMaior expr) (ALT expr OPMenor expr) (ALT expr OPIgual expr) (ALT expr OPMaiorIgual expr) (ALT expr OPDiferente expr) (ALT expr OPMenorIgual expr) (ALT expr)))))
2020-12-13 22:25:33:798 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR estudolLexer (RULES (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DIGIT (BLOCK (ALT [0-9]))) (RULE REAL (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) DOT (* (BLOCK (ALT DIGIT)))))) (RULE DOT (BLOCK (ALT '.'))) (RULE SE (BLOCK (ALT 'SE'))) (RULE SENAO (BLOCK (ALT 'SENAO'))) (RULE ENQUANTO (BLOCK (ALT 'ENQUANTO'))) (RULE FACA (BLOCK (ALT 'FACA'))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-z0-9])))))) (RULE CHAR (BLOCK (ALT '\'' (BLOCK (ALT [0-9A-Za-z]) (ALT '\\' (BLOCK (ALT [a-f]) (ALT [0-9]) (ALT [1-9] [0-9]) (ALT '1' [0-2] [0-7])))) '\''))) (RULE AbreChave (BLOCK (ALT '{'))) (RULE FechaChave (BLOCK (ALT '}'))) (RULE AbreParentese (BLOCK (ALT '('))) (RULE FechaParentese (BLOCK (ALT ')'))) (RULE PROGRAMA (BLOCK (ALT 'PROGRAMA'))) (RULE VARS (BLOCK (ALT 'VARS'))) (RULE ENTAO (BLOCK (ALT 'ENTAO'))) (RULE Doispontos (BLOCK (ALT ':'))) (RULE TipoInt (BLOCK (ALT 'INT'))) (RULE TipoReal (BLOCK (ALT 'REAL'))) (RULE TipoChar (BLOCK (ALT 'CHAR'))) (RULE PVirg (BLOCK (ALT ';'))) (RULE OPAtrib (BLOCK (ALT ':='))) (RULE VIRG (BLOCK (ALT ','))) (RULE OPAnd (BLOCK (ALT 'AND'))) (RULE OPOr (BLOCK (ALT 'OR'))) (RULE OPMaior (BLOCK (ALT '>'))) (RULE OPMenor (BLOCK (ALT '<'))) (RULE OPIgual (BLOCK (ALT '=='))) (RULE OPMaiorIgual (BLOCK (ALT '>='))) (RULE OPMenorIgual (BLOCK (ALT '<='))) (RULE OPDiferente (BLOCK (ALT '<>'))) (RULE OPMais (BLOCK (ALT '+'))) (RULE OPDiv (BLOCK (ALT '/'))) (RULE OPMenos (BLOCK (ALT '-'))) (RULE OPMult (BLOCK (ALT '*'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2020-12-13 22:25:34:087 left-recursion LogManager.java:25 fator
    :   ( {} INT<tokenIndex=265> 
        | REAL<tokenIndex=269> 
        | AbreParentese<tokenIndex=273> expr<tokenIndex=275> FechaParentese<tokenIndex=277> 
        | ID<tokenIndex=281> 
        )
        (
          {precpred(_ctx, 6)}?<p=6> OPMais<tokenIndex=251> fator<tokenIndex=253,p=7>
                  | {precpred(_ctx, 5)}?<p=5> OPMenos<tokenIndex=259> fator<tokenIndex=261,p=6>
        )*
    ;
2020-12-13 22:25:34:093 grammar LogManager.java:25 added: (RULE fator (BLOCK (ALT (BLOCK (ALT {} (INT (ELEMENT_OPTIONS (= tokenIndex 265)))) (ALT (REAL (ELEMENT_OPTIONS (= tokenIndex 269)))) (ALT (AbreParentese (ELEMENT_OPTIONS (= tokenIndex 273))) (expr (ELEMENT_OPTIONS (= tokenIndex 275))) (FechaParentese (ELEMENT_OPTIONS (= tokenIndex 277)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 281))))) (* (BLOCK (ALT ({precpred(_ctx, 6)}? (ELEMENT_OPTIONS (= p 6))) (OPMais (ELEMENT_OPTIONS (= tokenIndex 251))) (fator (ELEMENT_OPTIONS (= tokenIndex 253) (= p 7)))) (ALT ({precpred(_ctx, 5)}? (ELEMENT_OPTIONS (= p 5))) (OPMenos (ELEMENT_OPTIONS (= tokenIndex 259))) (fator (ELEMENT_OPTIONS (= tokenIndex 261) (= p 6)))))))))
2020-12-13 22:25:34:095 semantics LogManager.java:25 tokens={EOF=-1, INT=1, DIGIT=2, REAL=3, DOT=4, SE=5, SENAO=6, ENQUANTO=7, FACA=8, ID=9, CHAR=10, AbreChave=11, FechaChave=12, AbreParentese=13, FechaParentese=14, PROGRAMA=15, VARS=16, ENTAO=17, Doispontos=18, TipoInt=19, TipoReal=20, TipoChar=21, PVirg=22, OPAtrib=23, VIRG=24, OPAnd=25, OPOr=26, OPMaior=27, OPMenor=28, OPIgual=29, OPMaiorIgual=30, OPMenorIgual=31, OPDiferente=32, OPMais=33, OPDiv=34, OPMenos=35, OPMult=36, WS=37}
2020-12-13 22:25:34:095 semantics LogManager.java:25 strings={'.'=4, 'SE'=5, 'SENAO'=6, 'ENQUANTO'=7, 'FACA'=8, '{'=11, '}'=12, '('=13, ')'=14, 'PROGRAMA'=15, 'VARS'=16, 'ENTAO'=17, ':'=18, 'INT'=19, 'REAL'=20, 'CHAR'=21, ';'=22, ':='=23, ','=24, 'AND'=25, 'OR'=26, '>'=27, '<'=28, '=='=29, '>='=30, '<='=31, '<>'=32, '+'=33, '/'=34, '-'=35, '*'=36}
2020-12-13 22:25:34:106 LL1 LogManager.java:25 
DECISION 0 in rule listDecVariavel
2020-12-13 22:25:34:106 LL1 LogManager.java:25 look=[19, 20, 21]
2020-12-13 22:25:34:106 LL1 LogManager.java:25 LL(1)? true
2020-12-13 22:25:34:106 LL1 LogManager.java:25 
DECISION 1 in rule listDecVariavel1
2020-12-13 22:25:34:106 LL1 LogManager.java:25 look=[24, 24, 24, 22]
2020-12-13 22:25:34:106 LL1 LogManager.java:25 LL(1)? false
2020-12-13 22:25:34:106 LL1 LogManager.java:25 
DECISION 2 in rule listaComandos
2020-12-13 22:25:34:107 LL1 LogManager.java:25 look=[{5, 7..9, 12}, {5, 7..9, 22}]
2020-12-13 22:25:34:107 LL1 LogManager.java:25 LL(1)? false
2020-12-13 22:25:34:107 LL1 LogManager.java:25 
DECISION 3 in rule stmt
2020-12-13 22:25:34:107 LL1 LogManager.java:25 look=[9, 5, 8, 7, {12, 22}]
2020-12-13 22:25:34:107 LL1 LogManager.java:25 LL(1)? true
2020-12-13 22:25:34:107 LL1 LogManager.java:25 
DECISION 4 in rule expr
2020-12-13 22:25:34:107 LL1 LogManager.java:25 look=[{1, 3, 9, 13}, {1, 3, 9, 13}, {1, 3, 9, 13}]
2020-12-13 22:25:34:107 LL1 LogManager.java:25 LL(1)? false
2020-12-13 22:25:34:107 LL1 LogManager.java:25 
DECISION 5 in rule term
2020-12-13 22:25:34:107 LL1 LogManager.java:25 look=[{1, 3, 9, 13}, {1, 3, 9, 13}, {1, 3, 9, 13}]
2020-12-13 22:25:34:107 LL1 LogManager.java:25 LL(1)? false
2020-12-13 22:25:34:107 LL1 LogManager.java:25 
DECISION 6 in rule fator
2020-12-13 22:25:34:108 LL1 LogManager.java:25 look=[1, 3, 13, 9]
2020-12-13 22:25:34:108 LL1 LogManager.java:25 LL(1)? true
2020-12-13 22:25:34:108 LL1 LogManager.java:25 
DECISION 7 in rule fator
2020-12-13 22:25:34:108 LL1 LogManager.java:25 look=[null, null]
2020-12-13 22:25:34:108 LL1 LogManager.java:25 LL(1)? false
2020-12-13 22:25:34:108 LL1 LogManager.java:25 
DECISION 8 in rule fator
2020-12-13 22:25:34:108 LL1 LogManager.java:25 look=[null, null]
2020-12-13 22:25:34:108 LL1 LogManager.java:25 LL(1)? false
2020-12-13 22:25:34:108 LL1 LogManager.java:25 
DECISION 9 in rule logicalExp
2020-12-13 22:25:34:113 LL1 LogManager.java:25 look=[{1, 3, 9, 13}, {1, 3, 9, 13}, {1, 3, 9, 13}]
2020-12-13 22:25:34:113 LL1 LogManager.java:25 LL(1)? false
2020-12-13 22:25:34:113 LL1 LogManager.java:25 
DECISION 10 in rule logicalStmt
2020-12-13 22:25:34:113 LL1 LogManager.java:25 look=[{1, 3, 9, 13}, {1, 3, 9, 13}, {1, 3, 9, 13}, {1, 3, 9, 13}, {1, 3, 9, 13}, {1, 3, 9, 13}, {1, 3, 9, 13}]
2020-12-13 22:25:34:114 LL1 LogManager.java:25 LL(1)? false
2020-12-13 22:25:34:145 action-translator LogManager.java:25 translate 
2020-12-13 22:25:34:146 action-translator LogManager.java:25 translate precpred(_ctx, 6)
2020-12-13 22:25:34:147 action-translator LogManager.java:25 translate precpred(_ctx, 5)
2020-12-13 22:25:34:148 action-translator LogManager.java:25 translate precpred(_ctx, 6)
2020-12-13 22:25:34:148 action-translator LogManager.java:25 translate precpred(_ctx, 5)
