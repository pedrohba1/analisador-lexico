2020-12-13 21:34:54:893 grammar LogManager.java:25 before: (COMBINED_GRAMMAR estudol (RULES (RULE inicio (BLOCK (ALT PROGRAMA ID corpo))) (RULE corpo (BLOCK (ALT AbreChave secaoVariaveis listaComandos FechaChave))) (RULE secaoVariaveis (BLOCK (ALT VARS Doispontos listDecVariavel PVirg))) (RULE listDecVariavel (BLOCK (ALT TipoInt ID listDecVariavel1) (ALT TipoReal ID listDecVariavel1) (ALT TipoChar ID listDecVariavel1))) (RULE listDecVariavel1 (BLOCK (ALT VIRG TipoInt ID listDecVariavel1) (ALT VIRG TipoReal ID listDecVariavel1) (ALT VIRG TipoChar ID listDecVariavel1) (ALT EPSILON))) (RULE listaComandos (BLOCK (ALT stmt) (ALT stmt PVirg listaComandos))) (RULE stmt (BLOCK (ALT assign_stmt) (ALT if_then_stmt) (ALT do_while_stmt) (ALT while_stmt) (ALT EPSILON))) (RULE expr1 (BLOCK (ALT OPMais expr expr1) (ALT OPMenos expr expr1) (ALT OPDiv expr expr1) (ALT OPMult expr expr1) (ALT EPSILON))) (RULE assign_stmt (BLOCK (ALT ID OPAtrib expr))) (RULE if_then_stmt (BLOCK (ALT SE AbreParentese logicalExp FechaParentese ENTAO corpo))) (RULE do_while_stmt (BLOCK (ALT FACA corpo ENQUANTO AbreParentese logicalExp FechaParentese))) (RULE while_stmt (BLOCK (ALT ENQUANTO AbreParentese logicalExp FechaParentese corpo))) (RULE logicalExp (BLOCK (ALT logicalStmt OPAnd logicalStmt) (ALT logicalStmt OPOr logicalStmt) (ALT logicalStmt))) (RULE expr (BLOCK (ALT term OPMais term) (ALT term OPMenos term))) (RULE term (BLOCK (ALT fator OPMult fator) (ALT fator OPDiv fator))) (RULE fator (BLOCK (ALT OPMais fator) (ALT OPMenos fator) (ALT INT) (ALT REAL) (ALT AbreParentese expr FechaParentese) (ALT ID))) (RULE logicalStmt (BLOCK (ALT expr OPMaior expr) (ALT expr OPMenor expr) (ALT expr OPIgual expr) (ALT expr OPMaiorIgual expr) (ALT expr OPDiferente expr) (ALT expr OPMenorIgual expr) (ALT expr))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DIGIT (BLOCK (ALT [0-9]))) (RULE REAL (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) DOT (* (BLOCK (ALT DIGIT)))))) (RULE DOT (BLOCK (ALT '.'))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE CHAR (BLOCK (ALT '\'' (BLOCK (ALT [0-9A-Za-z]) (ALT '\\' (BLOCK (ALT [a-f]) (ALT [0-9]) (ALT [1-9] [0-9]) (ALT '1' [0-2] [0-7])))) '\''))) (RULE AbreChave (BLOCK (ALT '{'))) (RULE FechaChave (BLOCK (ALT '}'))) (RULE AbreParentese (BLOCK (ALT '('))) (RULE FechaParentese (BLOCK (ALT ')'))) (RULE PROGRAMA (BLOCK (ALT 'PROGRAMA'))) (RULE VARS (BLOCK (ALT 'VARS'))) (RULE ENTAO (BLOCK (ALT 'ENTAO'))) (RULE Doispontos (BLOCK (ALT ':'))) (RULE TipoInt (BLOCK (ALT 'INT'))) (RULE TipoReal (BLOCK (ALT 'REAL'))) (RULE TipoChar (BLOCK (ALT 'CHAR'))) (RULE PVirg (BLOCK (ALT ';'))) (RULE OPAtrib (BLOCK (ALT ':='))) (RULE SE (BLOCK (ALT 'SE'))) (RULE SENAO (BLOCK (ALT 'SENAO'))) (RULE ENQUANTO (BLOCK (ALT 'ENQUANTO'))) (RULE FACA (BLOCK (ALT 'FACA'))) (RULE VIRG (BLOCK (ALT ','))) (RULE OPAnd (BLOCK (ALT 'AND'))) (RULE OPOr (BLOCK (ALT 'OR'))) (RULE OPMaior (BLOCK (ALT '>'))) (RULE OPMenor (BLOCK (ALT '<'))) (RULE OPIgual (BLOCK (ALT '=='))) (RULE OPMaiorIgual (BLOCK (ALT '>='))) (RULE OPMenorIgual (BLOCK (ALT '<='))) (RULE OPDiferente (BLOCK (ALT '<>'))) (RULE OPMais (BLOCK (ALT '+'))) (RULE OPDiv (BLOCK (ALT '/'))) (RULE OPMenos (BLOCK (ALT '-'))) (RULE OPMult (BLOCK (ALT '*'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2020-12-13 21:34:54:917 grammar LogManager.java:25 after: (COMBINED_GRAMMAR estudol (RULES (RULE inicio (BLOCK (ALT PROGRAMA ID corpo))) (RULE corpo (BLOCK (ALT AbreChave secaoVariaveis listaComandos FechaChave))) (RULE secaoVariaveis (BLOCK (ALT VARS Doispontos listDecVariavel PVirg))) (RULE listDecVariavel (BLOCK (ALT TipoInt ID listDecVariavel1) (ALT TipoReal ID listDecVariavel1) (ALT TipoChar ID listDecVariavel1))) (RULE listDecVariavel1 (BLOCK (ALT VIRG TipoInt ID listDecVariavel1) (ALT VIRG TipoReal ID listDecVariavel1) (ALT VIRG TipoChar ID listDecVariavel1) (ALT EPSILON))) (RULE listaComandos (BLOCK (ALT stmt) (ALT stmt PVirg listaComandos))) (RULE stmt (BLOCK (ALT assign_stmt) (ALT if_then_stmt) (ALT do_while_stmt) (ALT while_stmt) (ALT EPSILON))) (RULE expr1 (BLOCK (ALT OPMais expr expr1) (ALT OPMenos expr expr1) (ALT OPDiv expr expr1) (ALT OPMult expr expr1) (ALT EPSILON))) (RULE assign_stmt (BLOCK (ALT ID OPAtrib expr))) (RULE if_then_stmt (BLOCK (ALT SE AbreParentese logicalExp FechaParentese ENTAO corpo))) (RULE do_while_stmt (BLOCK (ALT FACA corpo ENQUANTO AbreParentese logicalExp FechaParentese))) (RULE while_stmt (BLOCK (ALT ENQUANTO AbreParentese logicalExp FechaParentese corpo))) (RULE logicalExp (BLOCK (ALT logicalStmt OPAnd logicalStmt) (ALT logicalStmt OPOr logicalStmt) (ALT logicalStmt))) (RULE expr (BLOCK (ALT term OPMais term) (ALT term OPMenos term))) (RULE term (BLOCK (ALT fator OPMult fator) (ALT fator OPDiv fator))) (RULE fator (BLOCK (ALT OPMais fator) (ALT OPMenos fator) (ALT INT) (ALT REAL) (ALT AbreParentese expr FechaParentese) (ALT ID))) (RULE logicalStmt (BLOCK (ALT expr OPMaior expr) (ALT expr OPMenor expr) (ALT expr OPIgual expr) (ALT expr OPMaiorIgual expr) (ALT expr OPDiferente expr) (ALT expr OPMenorIgual expr) (ALT expr))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DIGIT (BLOCK (ALT [0-9]))) (RULE REAL (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) DOT (* (BLOCK (ALT DIGIT)))))) (RULE DOT (BLOCK (ALT '.'))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE CHAR (BLOCK (ALT '\'' (BLOCK (ALT [0-9A-Za-z]) (ALT '\\' (BLOCK (ALT [a-f]) (ALT [0-9]) (ALT [1-9] [0-9]) (ALT '1' [0-2] [0-7])))) '\''))) (RULE AbreChave (BLOCK (ALT '{'))) (RULE FechaChave (BLOCK (ALT '}'))) (RULE AbreParentese (BLOCK (ALT '('))) (RULE FechaParentese (BLOCK (ALT ')'))) (RULE PROGRAMA (BLOCK (ALT 'PROGRAMA'))) (RULE VARS (BLOCK (ALT 'VARS'))) (RULE ENTAO (BLOCK (ALT 'ENTAO'))) (RULE Doispontos (BLOCK (ALT ':'))) (RULE TipoInt (BLOCK (ALT 'INT'))) (RULE TipoReal (BLOCK (ALT 'REAL'))) (RULE TipoChar (BLOCK (ALT 'CHAR'))) (RULE PVirg (BLOCK (ALT ';'))) (RULE OPAtrib (BLOCK (ALT ':='))) (RULE SE (BLOCK (ALT 'SE'))) (RULE SENAO (BLOCK (ALT 'SENAO'))) (RULE ENQUANTO (BLOCK (ALT 'ENQUANTO'))) (RULE FACA (BLOCK (ALT 'FACA'))) (RULE VIRG (BLOCK (ALT ','))) (RULE OPAnd (BLOCK (ALT 'AND'))) (RULE OPOr (BLOCK (ALT 'OR'))) (RULE OPMaior (BLOCK (ALT '>'))) (RULE OPMenor (BLOCK (ALT '<'))) (RULE OPIgual (BLOCK (ALT '=='))) (RULE OPMaiorIgual (BLOCK (ALT '>='))) (RULE OPMenorIgual (BLOCK (ALT '<='))) (RULE OPDiferente (BLOCK (ALT '<>'))) (RULE OPMais (BLOCK (ALT '+'))) (RULE OPDiv (BLOCK (ALT '/'))) (RULE OPMenos (BLOCK (ALT '-'))) (RULE OPMult (BLOCK (ALT '*'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2020-12-13 21:34:54:943 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR estudol (RULES (RULE inicio (BLOCK (ALT PROGRAMA ID corpo))) (RULE corpo (BLOCK (ALT AbreChave secaoVariaveis listaComandos FechaChave))) (RULE secaoVariaveis (BLOCK (ALT VARS Doispontos listDecVariavel PVirg))) (RULE listDecVariavel (BLOCK (ALT TipoInt ID listDecVariavel1) (ALT TipoReal ID listDecVariavel1) (ALT TipoChar ID listDecVariavel1))) (RULE listDecVariavel1 (BLOCK (ALT VIRG TipoInt ID listDecVariavel1) (ALT VIRG TipoReal ID listDecVariavel1) (ALT VIRG TipoChar ID listDecVariavel1) (ALT EPSILON))) (RULE listaComandos (BLOCK (ALT stmt) (ALT stmt PVirg listaComandos))) (RULE stmt (BLOCK (ALT assign_stmt) (ALT if_then_stmt) (ALT do_while_stmt) (ALT while_stmt) (ALT EPSILON))) (RULE expr1 (BLOCK (ALT OPMais expr expr1) (ALT OPMenos expr expr1) (ALT OPDiv expr expr1) (ALT OPMult expr expr1) (ALT EPSILON))) (RULE assign_stmt (BLOCK (ALT ID OPAtrib expr))) (RULE if_then_stmt (BLOCK (ALT SE AbreParentese logicalExp FechaParentese ENTAO corpo))) (RULE do_while_stmt (BLOCK (ALT FACA corpo ENQUANTO AbreParentese logicalExp FechaParentese))) (RULE while_stmt (BLOCK (ALT ENQUANTO AbreParentese logicalExp FechaParentese corpo))) (RULE logicalExp (BLOCK (ALT logicalStmt OPAnd logicalStmt) (ALT logicalStmt OPOr logicalStmt) (ALT logicalStmt))) (RULE expr (BLOCK (ALT term OPMais term) (ALT term OPMenos term))) (RULE term (BLOCK (ALT fator OPMult fator) (ALT fator OPDiv fator))) (RULE fator (BLOCK (ALT OPMais fator) (ALT OPMenos fator) (ALT INT) (ALT REAL) (ALT AbreParentese expr FechaParentese) (ALT ID))) (RULE logicalStmt (BLOCK (ALT expr OPMaior expr) (ALT expr OPMenor expr) (ALT expr OPIgual expr) (ALT expr OPMaiorIgual expr) (ALT expr OPDiferente expr) (ALT expr OPMenorIgual expr) (ALT expr)))))
2020-12-13 21:34:54:943 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR estudolLexer (RULES (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DIGIT (BLOCK (ALT [0-9]))) (RULE REAL (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) DOT (* (BLOCK (ALT DIGIT)))))) (RULE DOT (BLOCK (ALT '.'))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE CHAR (BLOCK (ALT '\'' (BLOCK (ALT [0-9A-Za-z]) (ALT '\\' (BLOCK (ALT [a-f]) (ALT [0-9]) (ALT [1-9] [0-9]) (ALT '1' [0-2] [0-7])))) '\''))) (RULE AbreChave (BLOCK (ALT '{'))) (RULE FechaChave (BLOCK (ALT '}'))) (RULE AbreParentese (BLOCK (ALT '('))) (RULE FechaParentese (BLOCK (ALT ')'))) (RULE PROGRAMA (BLOCK (ALT 'PROGRAMA'))) (RULE VARS (BLOCK (ALT 'VARS'))) (RULE ENTAO (BLOCK (ALT 'ENTAO'))) (RULE Doispontos (BLOCK (ALT ':'))) (RULE TipoInt (BLOCK (ALT 'INT'))) (RULE TipoReal (BLOCK (ALT 'REAL'))) (RULE TipoChar (BLOCK (ALT 'CHAR'))) (RULE PVirg (BLOCK (ALT ';'))) (RULE OPAtrib (BLOCK (ALT ':='))) (RULE SE (BLOCK (ALT 'SE'))) (RULE SENAO (BLOCK (ALT 'SENAO'))) (RULE ENQUANTO (BLOCK (ALT 'ENQUANTO'))) (RULE FACA (BLOCK (ALT 'FACA'))) (RULE VIRG (BLOCK (ALT ','))) (RULE OPAnd (BLOCK (ALT 'AND'))) (RULE OPOr (BLOCK (ALT 'OR'))) (RULE OPMaior (BLOCK (ALT '>'))) (RULE OPMenor (BLOCK (ALT '<'))) (RULE OPIgual (BLOCK (ALT '=='))) (RULE OPMaiorIgual (BLOCK (ALT '>='))) (RULE OPMenorIgual (BLOCK (ALT '<='))) (RULE OPDiferente (BLOCK (ALT '<>'))) (RULE OPMais (BLOCK (ALT '+'))) (RULE OPDiv (BLOCK (ALT '/'))) (RULE OPMenos (BLOCK (ALT '-'))) (RULE OPMult (BLOCK (ALT '*'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2020-12-13 21:34:55:258 semantics LogManager.java:25 tokens={EOF=-1, INT=1, DIGIT=2, REAL=3, DOT=4, ID=5, CHAR=6, AbreChave=7, FechaChave=8, AbreParentese=9, FechaParentese=10, PROGRAMA=11, VARS=12, ENTAO=13, Doispontos=14, TipoInt=15, TipoReal=16, TipoChar=17, PVirg=18, OPAtrib=19, SE=20, SENAO=21, ENQUANTO=22, FACA=23, VIRG=24, OPAnd=25, OPOr=26, OPMaior=27, OPMenor=28, OPIgual=29, OPMaiorIgual=30, OPMenorIgual=31, OPDiferente=32, OPMais=33, OPDiv=34, OPMenos=35, OPMult=36, WS=37}
2020-12-13 21:34:55:258 semantics LogManager.java:25 strings={'.'=4, '{'=7, '}'=8, '('=9, ')'=10, 'PROGRAMA'=11, 'VARS'=12, 'ENTAO'=13, ':'=14, 'INT'=15, 'REAL'=16, 'CHAR'=17, ';'=18, ':='=19, 'SE'=20, 'SENAO'=21, 'ENQUANTO'=22, 'FACA'=23, ','=24, 'AND'=25, 'OR'=26, '>'=27, '<'=28, '=='=29, '>='=30, '<='=31, '<>'=32, '+'=33, '/'=34, '-'=35, '*'=36}
2020-12-13 21:34:55:265 LL1 LogManager.java:25 
DECISION 0 in rule listDecVariavel
2020-12-13 21:34:55:265 LL1 LogManager.java:25 look=[15, 16, 17]
2020-12-13 21:34:55:265 LL1 LogManager.java:25 LL(1)? true
2020-12-13 21:34:55:265 LL1 LogManager.java:25 
DECISION 1 in rule listDecVariavel1
2020-12-13 21:34:55:265 LL1 LogManager.java:25 look=[24, 24, 24, 18]
2020-12-13 21:34:55:266 LL1 LogManager.java:25 LL(1)? false
2020-12-13 21:34:55:266 LL1 LogManager.java:25 
DECISION 2 in rule listaComandos
2020-12-13 21:34:55:266 LL1 LogManager.java:25 look=[{5, 8, 20, 22..23}, {5, 18, 20, 22..23}]
2020-12-13 21:34:55:266 LL1 LogManager.java:25 LL(1)? false
2020-12-13 21:34:55:266 LL1 LogManager.java:25 
DECISION 3 in rule stmt
2020-12-13 21:34:55:266 LL1 LogManager.java:25 look=[5, 20, 23, 22, {8, 18}]
2020-12-13 21:34:55:266 LL1 LogManager.java:25 LL(1)? true
2020-12-13 21:34:55:266 LL1 LogManager.java:25 
DECISION 4 in rule expr1
2020-12-13 21:34:55:266 LL1 LogManager.java:25 look=[33, 35, 34, 36, null]
2020-12-13 21:34:55:266 LL1 LogManager.java:25 LL(1)? false
2020-12-13 21:34:55:266 LL1 LogManager.java:25 
DECISION 5 in rule logicalExp
2020-12-13 21:34:55:270 LL1 LogManager.java:25 look=[{1, 3, 5, 9, 33, 35}, {1, 3, 5, 9, 33, 35}, {1, 3, 5, 9, 33, 35}]
2020-12-13 21:34:55:270 LL1 LogManager.java:25 LL(1)? false
2020-12-13 21:34:55:270 LL1 LogManager.java:25 
DECISION 6 in rule expr
2020-12-13 21:34:55:270 LL1 LogManager.java:25 look=[{1, 3, 5, 9, 33, 35}, {1, 3, 5, 9, 33, 35}]
2020-12-13 21:34:55:270 LL1 LogManager.java:25 LL(1)? false
2020-12-13 21:34:55:270 LL1 LogManager.java:25 
DECISION 7 in rule term
2020-12-13 21:34:55:270 LL1 LogManager.java:25 look=[{1, 3, 5, 9, 33, 35}, {1, 3, 5, 9, 33, 35}]
2020-12-13 21:34:55:270 LL1 LogManager.java:25 LL(1)? false
2020-12-13 21:34:55:271 LL1 LogManager.java:25 
DECISION 8 in rule fator
2020-12-13 21:34:55:271 LL1 LogManager.java:25 look=[33, 35, 1, 3, 9, 5]
2020-12-13 21:34:55:271 LL1 LogManager.java:25 LL(1)? true
2020-12-13 21:34:55:271 LL1 LogManager.java:25 
DECISION 9 in rule logicalStmt
2020-12-13 21:34:55:271 LL1 LogManager.java:25 look=[{1, 3, 5, 9, 33, 35}, {1, 3, 5, 9, 33, 35}, {1, 3, 5, 9, 33, 35}, {1, 3, 5, 9, 33, 35}, {1, 3, 5, 9, 33, 35}, {1, 3, 5, 9, 33, 35}, {1, 3, 5, 9, 33, 35}]
2020-12-13 21:34:55:271 LL1 LogManager.java:25 LL(1)? false
