2020-12-10 18:37:07:129 grammar LogManager.java:25 before: (COMBINED_GRAMMAR estudol (RULES (RULE inicio (BLOCK (ALT PROGRAMA ID corpo))) (RULE corpo (BLOCK (ALT AbreChave secaoVariaveis listaComandos FechaChave))) (RULE secaoVariaveis (BLOCK (ALT VARS Doispontos listDecVariavel PVirg))) (RULE listDecVariavel (BLOCK (ALT varDec listDecVariavel1))) (RULE listDecVariavel1 (BLOCK (ALT VIRG varDec listDecVariavel1) (ALT EPSILON))) (RULE varDec (BLOCK (ALT tipos ID))) (RULE tipos (BLOCK (ALT TipotInt) (ALT TipoReal) (ALT TipoChar))) (RULE bloco (BLOCK (ALT AbreChave listaComandos FechaChave))) (RULE listaComandos (BLOCK (ALT command listaComandos1))) (RULE listaComandos1 (BLOCK (ALT command listaComandos1) (ALT EPSILON))) (RULE command (BLOCK (ALT singleCmd PVirg) (ALT stmt))) (RULE singleCmd (BLOCK (ALT ID OPAtrib cexpr))) (RULE stmt (BLOCK (ALT SE AbreParentese cexpr FechaParentese bloco) (ALT SE AbreParentese cexpr FechaParentese bloco SENAO bloco) (ALT ENQUANTO AbreParentese cexpr FechaParentese bloco) (ALT FACA bloco ENQUANTO cexpr))) (RULE cexpr (BLOCK (ALT expr cexpr1) (ALT expr OPIgual expr cexpr1) (ALT expr OPMaior expr cexpr1) (ALT expr OPMenor expr cexpr1))) (RULE cexpr1 (BLOCK (ALT OPAnd cexpr cexpr1) (ALT OPOr cexpr cexpr1) (ALT EPSILON))) (RULE expr (BLOCK (ALT AbreParentese cexpr FechaParentese expr1) (ALT ID expr1) (ALT INT expr1) (ALT CHAR expr1) (ALT FLOAT expr1))) (RULE expr1 (BLOCK (ALT OPMais expr expr1) (ALT OPMenos expr expr1) (ALT OPDiv expr expr1) (ALT OPMult expr expr1) (ALT EPSILON))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DIGIT (BLOCK (ALT [0-9]))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) (* (BLOCK (ALT DIGIT)))))) (RULE DOT (BLOCK (ALT '.'))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE CHAR (BLOCK (ALT '\'' (BLOCK (ALT [0-9A-Za-z]) (ALT '\\' (BLOCK (ALT [a-f]) (ALT [0-9]) (ALT [1-9] [0-9]) (ALT '1' [0-2] [0-7])))) '\''))) (RULE AbreChave (BLOCK (ALT '{'))) (RULE FechaChave (BLOCK (ALT '}'))) (RULE AbreParentese (BLOCK (ALT '('))) (RULE FechaParentese (BLOCK (ALT ')'))) (RULE PROGRAMA (BLOCK (ALT 'PROGRAMA'))) (RULE VARS (BLOCK (ALT 'VARS'))) (RULE Doispontos (BLOCK (ALT ':'))) (RULE TipotInt (BLOCK (ALT 'INT'))) (RULE TipoReal (BLOCK (ALT 'REAL'))) (RULE TipoChar (BLOCK (ALT 'CHAR'))) (RULE PVirg (BLOCK (ALT ';'))) (RULE OPAtrib (BLOCK (ALT ':='))) (RULE SE (BLOCK (ALT 'SE'))) (RULE SENAO (BLOCK (ALT 'SENAO'))) (RULE ENQUANTO (BLOCK (ALT 'ENQUANTO'))) (RULE FACA (BLOCK (ALT 'FACA'))) (RULE VIRG (BLOCK (ALT ','))) (RULE OPAnd (BLOCK (ALT 'AND'))) (RULE OPOr (BLOCK (ALT 'OR'))) (RULE OPMaior (BLOCK (ALT '>'))) (RULE OPMenor (BLOCK (ALT '<'))) (RULE OPIgual (BLOCK (ALT '=='))) (RULE OPMais (BLOCK (ALT '+'))) (RULE OPDiv (BLOCK (ALT '/'))) (RULE OPMenos (BLOCK (ALT '-'))) (RULE OPMult (BLOCK (ALT '*'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2020-12-10 18:37:07:152 grammar LogManager.java:25 after: (COMBINED_GRAMMAR estudol (RULES (RULE inicio (BLOCK (ALT PROGRAMA ID corpo))) (RULE corpo (BLOCK (ALT AbreChave secaoVariaveis listaComandos FechaChave))) (RULE secaoVariaveis (BLOCK (ALT VARS Doispontos listDecVariavel PVirg))) (RULE listDecVariavel (BLOCK (ALT varDec listDecVariavel1))) (RULE listDecVariavel1 (BLOCK (ALT VIRG varDec listDecVariavel1) (ALT EPSILON))) (RULE varDec (BLOCK (ALT tipos ID))) (RULE tipos (BLOCK (ALT (SET TipotInt TipoReal TipoChar)))) (RULE bloco (BLOCK (ALT AbreChave listaComandos FechaChave))) (RULE listaComandos (BLOCK (ALT command listaComandos1))) (RULE listaComandos1 (BLOCK (ALT command listaComandos1) (ALT EPSILON))) (RULE command (BLOCK (ALT singleCmd PVirg) (ALT stmt))) (RULE singleCmd (BLOCK (ALT ID OPAtrib cexpr))) (RULE stmt (BLOCK (ALT SE AbreParentese cexpr FechaParentese bloco) (ALT SE AbreParentese cexpr FechaParentese bloco SENAO bloco) (ALT ENQUANTO AbreParentese cexpr FechaParentese bloco) (ALT FACA bloco ENQUANTO cexpr))) (RULE cexpr (BLOCK (ALT expr cexpr1) (ALT expr OPIgual expr cexpr1) (ALT expr OPMaior expr cexpr1) (ALT expr OPMenor expr cexpr1))) (RULE cexpr1 (BLOCK (ALT OPAnd cexpr cexpr1) (ALT OPOr cexpr cexpr1) (ALT EPSILON))) (RULE expr (BLOCK (ALT AbreParentese cexpr FechaParentese expr1) (ALT ID expr1) (ALT INT expr1) (ALT CHAR expr1) (ALT FLOAT expr1))) (RULE expr1 (BLOCK (ALT OPMais expr expr1) (ALT OPMenos expr expr1) (ALT OPDiv expr expr1) (ALT OPMult expr expr1) (ALT EPSILON))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DIGIT (BLOCK (ALT [0-9]))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) (* (BLOCK (ALT DIGIT)))))) (RULE DOT (BLOCK (ALT '.'))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE CHAR (BLOCK (ALT '\'' (BLOCK (ALT [0-9A-Za-z]) (ALT '\\' (BLOCK (ALT [a-f]) (ALT [0-9]) (ALT [1-9] [0-9]) (ALT '1' [0-2] [0-7])))) '\''))) (RULE AbreChave (BLOCK (ALT '{'))) (RULE FechaChave (BLOCK (ALT '}'))) (RULE AbreParentese (BLOCK (ALT '('))) (RULE FechaParentese (BLOCK (ALT ')'))) (RULE PROGRAMA (BLOCK (ALT 'PROGRAMA'))) (RULE VARS (BLOCK (ALT 'VARS'))) (RULE Doispontos (BLOCK (ALT ':'))) (RULE TipotInt (BLOCK (ALT 'INT'))) (RULE TipoReal (BLOCK (ALT 'REAL'))) (RULE TipoChar (BLOCK (ALT 'CHAR'))) (RULE PVirg (BLOCK (ALT ';'))) (RULE OPAtrib (BLOCK (ALT ':='))) (RULE SE (BLOCK (ALT 'SE'))) (RULE SENAO (BLOCK (ALT 'SENAO'))) (RULE ENQUANTO (BLOCK (ALT 'ENQUANTO'))) (RULE FACA (BLOCK (ALT 'FACA'))) (RULE VIRG (BLOCK (ALT ','))) (RULE OPAnd (BLOCK (ALT 'AND'))) (RULE OPOr (BLOCK (ALT 'OR'))) (RULE OPMaior (BLOCK (ALT '>'))) (RULE OPMenor (BLOCK (ALT '<'))) (RULE OPIgual (BLOCK (ALT '=='))) (RULE OPMais (BLOCK (ALT '+'))) (RULE OPDiv (BLOCK (ALT '/'))) (RULE OPMenos (BLOCK (ALT '-'))) (RULE OPMult (BLOCK (ALT '*'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2020-12-10 18:37:07:178 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR estudol (RULES (RULE inicio (BLOCK (ALT PROGRAMA ID corpo))) (RULE corpo (BLOCK (ALT AbreChave secaoVariaveis listaComandos FechaChave))) (RULE secaoVariaveis (BLOCK (ALT VARS Doispontos listDecVariavel PVirg))) (RULE listDecVariavel (BLOCK (ALT varDec listDecVariavel1))) (RULE listDecVariavel1 (BLOCK (ALT VIRG varDec listDecVariavel1) (ALT EPSILON))) (RULE varDec (BLOCK (ALT tipos ID))) (RULE tipos (BLOCK (ALT (SET TipotInt TipoReal TipoChar)))) (RULE bloco (BLOCK (ALT AbreChave listaComandos FechaChave))) (RULE listaComandos (BLOCK (ALT command listaComandos1))) (RULE listaComandos1 (BLOCK (ALT command listaComandos1) (ALT EPSILON))) (RULE command (BLOCK (ALT singleCmd PVirg) (ALT stmt))) (RULE singleCmd (BLOCK (ALT ID OPAtrib cexpr))) (RULE stmt (BLOCK (ALT SE AbreParentese cexpr FechaParentese bloco) (ALT SE AbreParentese cexpr FechaParentese bloco SENAO bloco) (ALT ENQUANTO AbreParentese cexpr FechaParentese bloco) (ALT FACA bloco ENQUANTO cexpr))) (RULE cexpr (BLOCK (ALT expr cexpr1) (ALT expr OPIgual expr cexpr1) (ALT expr OPMaior expr cexpr1) (ALT expr OPMenor expr cexpr1))) (RULE cexpr1 (BLOCK (ALT OPAnd cexpr cexpr1) (ALT OPOr cexpr cexpr1) (ALT EPSILON))) (RULE expr (BLOCK (ALT AbreParentese cexpr FechaParentese expr1) (ALT ID expr1) (ALT INT expr1) (ALT CHAR expr1) (ALT FLOAT expr1))) (RULE expr1 (BLOCK (ALT OPMais expr expr1) (ALT OPMenos expr expr1) (ALT OPDiv expr expr1) (ALT OPMult expr expr1) (ALT EPSILON)))))
2020-12-10 18:37:07:178 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR estudolLexer (RULES (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DIGIT (BLOCK (ALT [0-9]))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) (* (BLOCK (ALT DIGIT)))))) (RULE DOT (BLOCK (ALT '.'))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE CHAR (BLOCK (ALT '\'' (BLOCK (ALT [0-9A-Za-z]) (ALT '\\' (BLOCK (ALT [a-f]) (ALT [0-9]) (ALT [1-9] [0-9]) (ALT '1' [0-2] [0-7])))) '\''))) (RULE AbreChave (BLOCK (ALT '{'))) (RULE FechaChave (BLOCK (ALT '}'))) (RULE AbreParentese (BLOCK (ALT '('))) (RULE FechaParentese (BLOCK (ALT ')'))) (RULE PROGRAMA (BLOCK (ALT 'PROGRAMA'))) (RULE VARS (BLOCK (ALT 'VARS'))) (RULE Doispontos (BLOCK (ALT ':'))) (RULE TipotInt (BLOCK (ALT 'INT'))) (RULE TipoReal (BLOCK (ALT 'REAL'))) (RULE TipoChar (BLOCK (ALT 'CHAR'))) (RULE PVirg (BLOCK (ALT ';'))) (RULE OPAtrib (BLOCK (ALT ':='))) (RULE SE (BLOCK (ALT 'SE'))) (RULE SENAO (BLOCK (ALT 'SENAO'))) (RULE ENQUANTO (BLOCK (ALT 'ENQUANTO'))) (RULE FACA (BLOCK (ALT 'FACA'))) (RULE VIRG (BLOCK (ALT ','))) (RULE OPAnd (BLOCK (ALT 'AND'))) (RULE OPOr (BLOCK (ALT 'OR'))) (RULE OPMaior (BLOCK (ALT '>'))) (RULE OPMenor (BLOCK (ALT '<'))) (RULE OPIgual (BLOCK (ALT '=='))) (RULE OPMais (BLOCK (ALT '+'))) (RULE OPDiv (BLOCK (ALT '/'))) (RULE OPMenos (BLOCK (ALT '-'))) (RULE OPMult (BLOCK (ALT '*'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
